<style>
  /* Custom scrollbar para modal e listas */
  .scrollbar-thin::-webkit-scrollbar {
    width: 8px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: rgba(76, 29, 149, 0.2);
    border-radius: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgb(124, 58, 237);
    border-radius: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgb(139, 92, 246);
  }

  /* Melhorar scroll do modal externo */
  #add-movie-modal::-webkit-scrollbar {
    width: 10px;
  }
  
  #add-movie-modal::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #add-movie-modal::-webkit-scrollbar-thumb {
    background: rgba(124, 58, 237, 0.5);
    border-radius: 5px;
  }
  
  #add-movie-modal::-webkit-scrollbar-thumb:hover {
    background: rgba(124, 58, 237, 0.7);
  }

  /* Scroll suave */
  #add-movie-modal, .scrollbar-thin {
    scroll-behavior: smooth;
  }
</style>

<div class="container mx-auto px-4 py-8 max-w-7xl">
  <div class="glass rounded-2xl border border-violet-700/30 bg-white/5 p-6 md:p-8">
    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8">
      <h1 class="text-3xl font-bold bg-gradient-to-r from-violet-400 to-fuchsia-400 bg-clip-text text-transparent">
        ðŸŽ¬ Nossos Filmes
      </h1>
      <button class="add-movie-trigger w-full sm:w-auto px-6 py-2.5 bg-gradient-to-r from-violet-600 to-fuchsia-600 hover:from-violet-700 hover:to-fuchsia-700 text-white rounded-lg font-medium transition-all shadow-lg hover:shadow-violet-500/50 hover:scale-105">
        <svg class="inline-block w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Adicionar Filme
      </button>
    </div>

    <div class="flex border-b border-violet-700/30 mb-6 overflow-x-auto">
      <button id="tab-watched" class="tab-button px-6 py-3 font-medium text-violet-300 hover:text-violet-100 transition-colors border-b-2 border-violet-500 whitespace-nowrap">
        JÃ¡ assistimos
        <span class="watched-count ml-2 px-2 py-0.5 bg-violet-600/30 rounded-full text-xs"><%= watchedMovies.length %></span>
      </button>
      <button id="tab-watchlist" class="tab-button px-6 py-3 font-medium text-violet-500 hover:text-violet-300 transition-colors border-b-2 border-transparent whitespace-nowrap">
        Queremos assistir
        <span class="watchlist-count ml-2 px-2 py-0.5 bg-violet-600/20 rounded-full text-xs"><%= watchlistMovies.length %></span>
      </button>
    </div>

    <div id="content-watched" class="tab-content">
      <% if (watchedMovies.length === 0) { %>
        <%- include('_empty_state', { icon: 'play', title: 'Nenhum filme assistido ainda', description: 'Comece adicionando filmes que vocÃª jÃ¡ assistiu juntos', buttonText: 'Adicionar primeiro filme' }) %>
      <% } else { %>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          <% watchedMovies.forEach(movie => { %>
            <%- include('_movie_card', { movie }) %>
          <% }) %>
        </div>
      <% } %>
    </div>

    <div id="content-watchlist" class="tab-content hidden">
      <% if (watchlistMovies.length === 0) { %>
        <%- include('_empty_state', { icon: 'bookmark', title: 'Lista vazia', description: 'Adicione filmes que vocÃªs querem assistir juntos', buttonText: 'Adicionar Ã  lista' }) %>
      <% } else { %>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          <% watchlistMovies.forEach(movie => { %>
            <%- include('_movie_card', { movie }) %>
          <% }) %>
        </div>
      <% } %>
    </div>
  </div>
</div>

<%- include('_add_movie_modal', { tmdbConfigured }) %>

<script>
(function() {
  const tabButtons = document.querySelectorAll(".tab-button");
  const tabContents = document.querySelectorAll(".tab-content");

  tabButtons.forEach((btn, index) => {
    btn.addEventListener("click", () => {
      tabButtons.forEach((b) => {
        b.classList.remove("border-violet-500", "text-violet-100");
        b.classList.add("border-transparent", "text-violet-500");
      });
      tabContents.forEach((c) => c.classList.add("hidden"));
      
      btn.classList.remove("border-transparent", "text-violet-500");
      btn.classList.add("border-violet-500", "text-violet-100");
      tabContents[index].classList.remove("hidden");
    });
  });

  // Event delegation para avaliaÃ§Ãµes de filmes
  document.addEventListener("click", async (e) => {
    const starBtn = e.target.closest(".star-btn");
    if (!starBtn) return;

    const rating = parseInt(starBtn.dataset.rating);
    const movieId = starBtn.dataset.movieId;

    if (!rating || !movieId) return;

    try {
      // Buscar o CSRF token da meta tag
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
      
      const response = await fetch(`/movies/${movieId}`, {
        method: "PUT",
        headers: { 
          "Content-Type": "application/json",
          "X-CSRF-Token": csrfToken
        },
        body: JSON.stringify({ rating }),
      });

      if (!response.ok) throw new Error("Erro ao avaliar filme");

      const data = await response.json();
      
      if (data.success) {
        // Atualizar UI sem reload da pÃ¡gina
        updateStarsDisplay(movieId, rating, true);
        
        // Mostrar toast de sucesso
        if (window.showToast) {
          window.showToast(`AvaliaÃ§Ã£o de ${rating} estrela${rating > 1 ? 's' : ''} salva!`);
        }
      } else {
        throw new Error(data.error || "Erro ao avaliar filme");
      }
    } catch (error) {
      console.error("Erro:", error);
      window.showToast(error.message || "Erro ao avaliar filme", "error");
    }
  });

  // FunÃ§Ã£o para atualizar a exibiÃ§Ã£o das estrelas
  function updateStarsDisplay(movieId, rating, isCurrentUser) {
    // Encontrar todos os botÃµes de estrela deste filme
    const starButtons = document.querySelectorAll(`button.star-btn[data-movie-id="${movieId}"]`);
    
    starButtons.forEach((btn) => {
      const starRating = parseInt(btn.dataset.rating);
      const star = btn.querySelector('svg');
      
      if (!star) return;

      if (starRating <= rating) {
        // Estrela preenchida
        star.classList.remove('text-violet-600');
        star.classList.add('text-fuchsia-400', 'fill-fuchsia-400');
        star.setAttribute('fill', 'currentColor');
      } else {
        // Estrela vazia
        star.classList.remove('text-fuchsia-400', 'fill-fuchsia-400');
        star.classList.add('text-violet-600');
        star.setAttribute('fill', 'none');
      }
    });

    // Atualizar texto de instruÃ§Ã£o no card
    const movieCard = document.querySelector(`.movie-card[data-movie-id="${movieId}"]`);
    if (movieCard) {
      const instructionSpan = movieCard.querySelector('.text-\\[10px\\].text-violet-400');
      if (instructionSpan) {
        instructionSpan.textContent = 'Clique para alterar';
      }
    }
  }

  document.querySelectorAll(".add-movie-trigger").forEach((btn) => {
    btn.addEventListener("click", () => {
      if (window.openAddMovieModal) {
        window.openAddMovieModal();
      }
    });
  });

  window.showToast = function (message, type = "success") {
    const toast = document.createElement("div");
    toast.className = `fixed bottom-6 right-6 px-6 py-3 rounded-lg shadow-lg text-white font-medium transition-all duration-300 z-50 ${type === "error" ? "bg-red-500" : "bg-green-500"}`;
    toast.textContent = message;
    toast.style.opacity = "0";
    toast.style.transform = "translateY(20px)";
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = "1";
      toast.style.transform = "translateY(0)";
    }, 10);
    
    setTimeout(() => {
      toast.style.opacity = "0";
      toast.style.transform = "translateY(20px)";
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  };
})();
</script>
