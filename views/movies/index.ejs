<style>
  /* Custom scrollbar para modal e listas */
  .scrollbar-thin::-webkit-scrollbar {
    width: 8px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: rgba(76, 29, 149, 0.2);
    border-radius: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgb(124, 58, 237);
    border-radius: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgb(139, 92, 246);
  }

  /* Melhorar scroll do modal externo */
  #add-movie-modal::-webkit-scrollbar {
    width: 10px;
  }
  
  #add-movie-modal::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #add-movie-modal::-webkit-scrollbar-thumb {
    background: rgba(124, 58, 237, 0.5);
    border-radius: 5px;
  }
  
  #add-movie-modal::-webkit-scrollbar-thumb:hover {
    background: rgba(124, 58, 237, 0.7);
  }

  /* Scrollbar do modal da roleta */
  #movie-roulette-modal .overflow-y-auto::-webkit-scrollbar {
    width: 10px;
  }
  
  #movie-roulette-modal .overflow-y-auto::-webkit-scrollbar-track {
    background: rgba(76, 29, 149, 0.2);
    border-radius: 5px;
  }
  
  #movie-roulette-modal .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(251, 191, 36, 0.5);
    border-radius: 5px;
  }
  
  #movie-roulette-modal .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: rgba(251, 191, 36, 0.7);
  }

  /* Scroll suave */
  #add-movie-modal, .scrollbar-thin {
    scroll-behavior: smooth;
  }

  /* Animações da roleta */
  @keyframes glow {
    0%, 100% { box-shadow: 0 0 20px rgba(234, 179, 8, 0.3); }
    50% { box-shadow: 0 0 40px rgba(234, 179, 8, 0.6); }
  }

  #roulette-carousel .movie-slot {
    animation: none;
  }

  @keyframes slideIn {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  #roulette-result > * {
    animation: slideIn 0.5s ease-out;
  }
</style>

<div class="container mx-auto px-4 py-8 max-w-7xl">
  <div class="glass rounded-2xl border border-violet-700/30 bg-white/5 p-6 md:p-8">
    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8">
      <h1 class="text-3xl font-bold bg-gradient-to-r from-violet-400 to-fuchsia-400 bg-clip-text text-transparent">
        🎬 Nossos Filmes
      </h1>
      <div class="flex flex-wrap gap-2 w-full sm:w-auto">
        <button class="add-movie-trigger flex-1 sm:flex-none px-6 py-2.5 bg-gradient-to-r from-violet-600 to-fuchsia-600 hover:from-violet-700 hover:to-fuchsia-700 text-white rounded-lg font-medium transition-all shadow-lg hover:shadow-violet-500/50 hover:scale-105">
          <svg class="inline-block w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Adicionar Filme
        </button>
        <button id="open-roulette-btn" class="flex-1 sm:flex-none px-6 py-2.5 bg-gradient-to-r from-pink-600 to-rose-600 hover:from-pink-700 hover:to-rose-700 text-white rounded-lg font-medium transition-all shadow-lg hover:shadow-pink-500/50 hover:scale-105">
          <svg class="inline-block w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          🎰 Roleta
        </button>
        <button id="open-game-btn" class="flex-1 sm:flex-none px-6 py-2.5 bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 text-white rounded-lg font-medium transition-all shadow-lg hover:shadow-amber-500/50 hover:scale-105">
          <svg class="inline-block w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
          </svg>
          🎮 Jogo
        </button>
      </div>
    </div>

    <div class="flex border-b border-violet-700/30 mb-6 overflow-x-auto">
      <button id="tab-watched" class="tab-button px-6 py-3 font-medium text-violet-300 hover:text-violet-100 transition-colors border-b-2 border-violet-500 whitespace-nowrap">
        Já assistimos
        <span class="watched-count ml-2 px-2 py-0.5 bg-violet-600/30 rounded-full text-xs"><%= watchedMovies.length %></span>
      </button>
      <button id="tab-watchlist" class="tab-button px-6 py-3 font-medium text-violet-500 hover:text-violet-300 transition-colors border-b-2 border-transparent whitespace-nowrap">
        Queremos assistir
        <span class="watchlist-count ml-2 px-2 py-0.5 bg-violet-600/20 rounded-full text-xs"><%= watchlistMovies.length %></span>
      </button>
    </div>

    <div id="content-watched" class="tab-content">
      <% if (watchedMovies.length === 0) { %>
        <%- include('_empty_state', { icon: 'play', title: 'Nenhum filme assistido ainda', description: 'Comece adicionando filmes que você já assistiu juntos', buttonText: 'Adicionar primeiro filme' }) %>
      <% } else { %>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          <% watchedMovies.forEach(movie => { %>
            <%- include('_movie_card', { movie }) %>
          <% }) %>
        </div>
      <% } %>
    </div>

    <div id="content-watchlist" class="tab-content hidden">
      <% if (watchlistMovies.length === 0) { %>
        <%- include('_empty_state', { icon: 'bookmark', title: 'Lista vazia', description: 'Adicione filmes que vocês querem assistir juntos', buttonText: 'Adicionar à lista' }) %>
      <% } else { %>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          <% watchlistMovies.forEach(movie => { %>
            <%- include('_movie_card', { movie }) %>
          <% }) %>
        </div>
      <% } %>
    </div>
  </div>
</div>

<%- include('_add_movie_modal', { tmdbConfigured }) %>
<%- include('_movie_roulette_modal') %>
<%- include('_rating_game_modal') %>

<script>
(function() {
  const tabButtons = document.querySelectorAll(".tab-button");
  const tabContents = document.querySelectorAll(".tab-content");

  tabButtons.forEach((btn, index) => {
    btn.addEventListener("click", () => {
      tabButtons.forEach((b) => {
        b.classList.remove("border-violet-500", "text-violet-100");
        b.classList.add("border-transparent", "text-violet-500");
      });
      tabContents.forEach((c) => c.classList.add("hidden"));
      
      btn.classList.remove("border-transparent", "text-violet-500");
      btn.classList.add("border-violet-500", "text-violet-100");
      tabContents[index].classList.remove("hidden");
    });
  });

  // Event delegation para avaliações de filmes
  document.addEventListener("click", async (e) => {
    const starBtn = e.target.closest(".star-btn");
    if (!starBtn) return;

    const rating = parseInt(starBtn.dataset.rating);
    const movieId = starBtn.dataset.movieId;

    if (!rating || !movieId) return;

    try {
      // Buscar o CSRF token da meta tag
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
      
      const response = await fetch(`/movies/${movieId}`, {
        method: "PUT",
        headers: { 
          "Content-Type": "application/json",
          "X-CSRF-Token": csrfToken
        },
        body: JSON.stringify({ rating }),
      });

      if (!response.ok) throw new Error("Erro ao avaliar filme");

      const data = await response.json();
      
      if (data.success) {
        // Atualizar UI sem reload da página
        updateStarsDisplay(movieId, rating, true);
        
        // Mostrar toast de sucesso
        if (window.showToast) {
          window.showToast(`Avaliação de ${rating} estrela${rating > 1 ? 's' : ''} salva!`);
        }
      } else {
        throw new Error(data.error || "Erro ao avaliar filme");
      }
    } catch (error) {
      console.error("Erro:", error);
      window.showToast(error.message || "Erro ao avaliar filme", "error");
    }
  });

  // Função para atualizar a exibição das estrelas
  function updateStarsDisplay(movieId, rating, isCurrentUser) {
    // Encontrar todos os botões de estrela deste filme
    const starButtons = document.querySelectorAll(`button.star-btn[data-movie-id="${movieId}"]`);
    
    starButtons.forEach((btn) => {
      const starRating = parseInt(btn.dataset.rating);
      const star = btn.querySelector('svg');
      
      if (!star) return;

      if (starRating <= rating) {
        // Estrela preenchida
        star.classList.remove('text-violet-600');
        star.classList.add('text-fuchsia-400', 'fill-fuchsia-400');
        star.setAttribute('fill', 'currentColor');
      } else {
        // Estrela vazia
        star.classList.remove('text-fuchsia-400', 'fill-fuchsia-400');
        star.classList.add('text-violet-600');
        star.setAttribute('fill', 'none');
      }
    });

    // Atualizar texto de instrução no card
    const movieCard = document.querySelector(`.movie-card[data-movie-id="${movieId}"]`);
    if (movieCard) {
      const instructionSpan = movieCard.querySelector('.text-\\[10px\\].text-violet-400');
      if (instructionSpan) {
        instructionSpan.textContent = 'Clique para alterar';
      }
    }
  }

  document.querySelectorAll(".add-movie-trigger").forEach((btn) => {
    btn.addEventListener("click", () => {
      if (window.openAddMovieModal) {
        window.openAddMovieModal();
      }
    });
  });

  window.showToast = function (message, type = "success") {
    const toast = document.createElement("div");
    toast.className = `fixed bottom-6 right-6 px-6 py-3 rounded-lg shadow-lg text-white font-medium transition-all duration-300 z-50 ${type === "error" ? "bg-red-500" : "bg-green-500"}`;
    toast.textContent = message;
    toast.style.opacity = "0";
    toast.style.transform = "translateY(20px)";
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = "1";
      toast.style.transform = "translateY(0)";
    }, 10);
    
    setTimeout(() => {
      toast.style.opacity = "0";
      toast.style.transform = "translateY(20px)";
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  };

  // ==================== ROLETA DE FILMES ====================
  const watchlistMovies = <%- JSON.stringify(watchlistMovies) %>;
  const rouletteModal = document.getElementById('movie-roulette-modal');
  const rouletteModalContent = document.getElementById('roulette-modal-content');
  const rouletteSelection = document.getElementById('roulette-selection');
  const rouletteSpinner = document.getElementById('roulette-spinner');
  let selectedMovies = [];
  let rouletteInterval = null;

  document.getElementById('open-roulette-btn')?.addEventListener('click', () => {
    if (watchlistMovies.length === 0) {
      window.showToast('Adicione filmes à lista "Queremos assistir" primeiro!', 'error');
      return;
    }
    openRouletteModal();
  });

  function openRouletteModal() {
    // Resetar estado completamente
    selectedMovies = [...watchlistMovies];
    rouletteSelection.classList.remove('hidden');
    rouletteSpinner.classList.add('hidden');
    document.getElementById('roulette-result').classList.add('hidden');
    
    // Garantir que o botão de girar está visível
    const spinBtn = document.getElementById('spin-btn-selection');
    if (spinBtn) {
      spinBtn.classList.remove('hidden');
      spinBtn.disabled = false;
    }
    
    // Renderizar lista de filmes
    const moviesList = document.getElementById('roulette-movies-list');
    moviesList.innerHTML = watchlistMovies.map(movie => `
      <label class="flex items-center gap-2 p-2 rounded bg-violet-900/20 border border-violet-700/30 hover:border-violet-600 cursor-pointer transition">
        <input type="checkbox" checked class="roulette-checkbox w-4 h-4 accent-fuchsia-500" data-movie-id="${movie.id}">
        <span class="text-sm text-violet-200 line-clamp-1">${movie.title}</span>
      </label>
    `).join('');

    updateSelectedCount();
    
    rouletteModal.classList.remove('hidden');
    setTimeout(() => {
      rouletteModal.style.opacity = '1';
      rouletteModalContent.style.transform = 'scale(1)';
    }, 10);
  }

  function closeRouletteModal() {
    rouletteModal.style.opacity = '0';
    rouletteModalContent.style.transform = 'scale(0.9)';
    if (rouletteInterval) clearInterval(rouletteInterval);
    
    // Resetar estado ao fechar
    setTimeout(() => {
      rouletteModal.classList.add('hidden');
      // Resetar visualizações
      rouletteSelection.classList.remove('hidden');
      rouletteSpinner.classList.add('hidden');
      document.getElementById('roulette-result').classList.add('hidden');
      // Garantir que o botão esteja visível para próxima vez
      const spinBtn = document.getElementById('spin-btn-selection');
      if (spinBtn) {
        spinBtn.classList.remove('hidden');
      }
    }, 300);
  }

  document.getElementById('close-roulette-btn')?.addEventListener('click', closeRouletteModal);

  document.getElementById('select-all-btn')?.addEventListener('click', () => {
    document.querySelectorAll('.roulette-checkbox').forEach(cb => cb.checked = true);
    updateSelectedCount();
  });

  document.getElementById('deselect-all-btn')?.addEventListener('click', () => {
    document.querySelectorAll('.roulette-checkbox').forEach(cb => cb.checked = false);
    updateSelectedCount();
  });

  document.addEventListener('change', (e) => {
    if (e.target.classList.contains('roulette-checkbox')) {
      updateSelectedCount();
    }
  });

  function updateSelectedCount() {
    const checked = document.querySelectorAll('.roulette-checkbox:checked');
    selectedMovies = Array.from(checked).map(cb => {
      const id = parseInt(cb.dataset.movieId);
      return watchlistMovies.find(m => m.id === id);
    }).filter(Boolean);
    document.getElementById('selected-count').textContent = selectedMovies.length;
    document.getElementById('spin-btn-selection').disabled = selectedMovies.length === 0;
  }

  document.getElementById('spin-btn-selection')?.addEventListener('click', prepareRoulette);

  function prepareRoulette() {
    console.log('prepareRoulette called, selectedMovies:', selectedMovies);
    if (selectedMovies.length === 0) {
      console.log('No movies selected!');
      return;
    }

    // Esconder seleção, preparar spinner
    rouletteSelection.classList.add('hidden');
    rouletteSpinner.classList.remove('hidden');
    document.getElementById('spin-btn-selection').classList.add('hidden');
    document.getElementById('roulette-result').classList.add('hidden');

    // Criar carrossel com filmes repetidos para efeito infinito
    const carousel = document.getElementById('roulette-carousel');
    console.log('carousel element:', carousel);
    
    // SIMPLIFICADO: Apenas 10 repetições (suficiente para boa animação)
    const repeatCount = 10;
    const allMovies = [];
    
    for (let i = 0; i < repeatCount; i++) {
      allMovies.push(...selectedMovies);
    }
    
    console.log('allMovies count:', allMovies.length);

    // Renderizar todos os filmes no carrossel
    // IMPORTANTE: SEM MARGIN (my-2 removido) para alinhamento perfeito!
    carousel.innerHTML = allMovies.map(movie => `
      <div class="movie-slot flex items-center gap-3 p-3 bg-violet-900/80 rounded-lg border-2 border-violet-600/50 backdrop-blur-sm" style="height: 144px; min-height: 144px;">
        <div class="w-20 h-28 flex-shrink-0 rounded overflow-hidden bg-violet-950/50 border border-violet-700">
          ${movie.poster_url ? 
            `<img src="${movie.poster_url}" alt="${movie.title}" class="w-full h-full object-cover">` :
            `<div class="w-full h-full flex items-center justify-center">
              <svg class="w-8 h-8 text-violet-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 12h18M3 16h4m10 0h4M4 20h16a1 1 0 001-1V5a1 1 0 00-1-1H4a1 1 0 00-1 1v14a1 1 0 001 1z" />
              </svg>
            </div>`
          }
        </div>
        <div class="flex-1 min-w-0">
          <h4 class="text-lg font-bold text-white drop-shadow-lg line-clamp-2">${movie.title}</h4>
          <p class="text-sm text-violet-200 font-medium">${movie.year || ''}</p>
        </div>
      </div>
    `).join('');
    
    console.log('carousel HTML rendered, length:', carousel.innerHTML.length);
    console.log('carousel children count:', carousel.children.length);
    console.log('Total height estimate:', allMovies.length * 144, 'px');

    // Escolher filme vencedor (entre os filmes originais)
    const winnerIndex = Math.floor(Math.random() * selectedMovies.length);
    const winner = selectedMovies[winnerIndex];
    console.log('Winner selected:', winner.title, 'at index', winnerIndex);

    // LÓGICA SIMPLIFICADA DE POSICIONAMENTO
    const slotHeight = 144; // altura EXATA de cada slot (sem margin)
    const viewportHeight = 432; // altura da janela (3 slots exatos)
    
    // Posição inicial: começar com o filme no índice 1 centralizado
    // Para centralizar, o topo do slot deve estar em: (432/2) - (144/2) = 216 - 72 = 144px
    // translateY = -(índice × 144) + 144
    const initialFilmIndex = 1;
    const startPosition = -(initialFilmIndex * slotHeight) + (viewportHeight / 2) - (slotHeight / 2);
    
    // Posição final: vencedor no meio do carousel (repetição 5 de 10)
    const middleRepetition = Math.floor(repeatCount / 2);
    const finalFilmIndex = (middleRepetition * selectedMovies.length) + winnerIndex;
    const finalPosition = -(finalFilmIndex * slotHeight) + (viewportHeight / 2) - (slotHeight / 2);
    
    const totalCarouselHeight = allMovies.length * slotHeight;
    const distanceToTravel = Math.abs(finalPosition - startPosition);
    
    console.log('=== SIMPLIFIED ROULETTE SETUP ===');
    console.log('Total films:', allMovies.length);
    console.log('Carousel height:', totalCarouselHeight, 'px');
    console.log('Slot height:', slotHeight, 'px (EXACT, no margin)');
    console.log('Viewport height:', viewportHeight, 'px (exactly 3 slots)');
    console.log('Initial film index:', initialFilmIndex);
    console.log('Start position:', startPosition, 'px');
    console.log('Final film index:', finalFilmIndex, '(' + winner.title + ')');
    console.log('Final position:', finalPosition, 'px');
    console.log('Distance to travel:', distanceToTravel, 'px');

    // Posicionar carousel na posição inicial
    carousel.style.transform = `translateY(${startPosition}px)`;
    carousel.style.transition = 'none';
    
    console.log('✅ Roulette ready! Should show 3 films perfectly aligned.');
    console.log('   Film 1 (top): partially visible');
    console.log('   Film 2 (middle): CENTERED in yellow box ⭐');
    console.log('   Film 3 (bottom): partially visible');
    console.log('🎲 Starting animation automatically in 0.5s...');
    
    // Iniciar animação automaticamente após um pequeno delay
    setTimeout(() => {
      console.log('🎲 SPINNING from:', startPosition, 'to:', finalPosition);
      const centerOffset = (viewportHeight / 2) - (slotHeight / 2);
      animateSlotMachine(carousel, startPosition, finalPosition, winner, centerOffset, slotHeight, viewportHeight);
    }, 500); // 500ms de delay para dar tempo de ver os filmes iniciais
  }

  function animateSlotMachine(carousel, startPosition, finalPosition, winner, centerOffset, slotHeight, viewportHeight) {
    console.log('🎬 === ANIMATION START ===');
    console.log('From:', startPosition, 'px → To:', finalPosition, 'px');
    console.log('Distance:', Math.abs(finalPosition - startPosition), 'px');
    
    const totalDistance = Math.abs(finalPosition - startPosition);
    let currentPosition = startPosition;
    let frame = 0;
    const totalFrames = 420; // 7 segundos a 60fps
    
    function animate() {
      frame++;
      const progress = frame / totalFrames;
      
      // Curva de easing: aceleração inicial, velocidade constante, desaceleração suave
      let easedProgress;
      if (progress < 0.2) {
        // Primeiros 20%: aceleração quadrática
        easedProgress = progress * progress * 2.5;
      } else if (progress < 0.7) {
        // 20-70%: velocidade linear constante
        const adjustedProgress = (progress - 0.2) / 0.5;
        easedProgress = 0.1 + (adjustedProgress * 0.6);
      } else {
        // Últimos 30%: desaceleração cúbica suave
        const adjustedProgress = (progress - 0.7) / 0.3;
        const decel = 1 - Math.pow(1 - adjustedProgress, 3);
        easedProgress = 0.7 + (decel * 0.3);
      }
      
      // Calcular posição atual
      const targetPosition = startPosition + (totalDistance * easedProgress * -1);
      currentPosition = targetPosition;
      
      carousel.style.transform = `translateY(${currentPosition}px)`;
      carousel.style.transition = 'none';
      
      // Log a cada 60 frames (1 segundo)
      if (frame % 60 === 0) {
        console.log(`⏱️ ${(frame/60).toFixed(0)}s: ${(progress*100).toFixed(0)}% complete, at ${currentPosition.toFixed(0)}px`);
      }
      
      // Continuar ou parar
      if (frame < totalFrames) {
        requestAnimationFrame(animate);
      } else {
        // Animação completa
        console.log('🏁 === ANIMATION END ===');
        console.log('Final position:', currentPosition.toFixed(2), 'px');
        console.log('Target was:', finalPosition, 'px');
        console.log('Difference:', Math.abs(currentPosition - finalPosition).toFixed(2), 'px');
        console.log('Winner should be centered in yellow box! ⭐');
        
        carousel.style.transform = `translateY(${finalPosition}px)`;
        carousel.style.transition = 'transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1)';
        
        // Efeito de "bounce" ao parar
        setTimeout(() => {
          carousel.style.transform = `translateY(${finalPosition + 30}px)`;
          setTimeout(() => {
            carousel.style.transform = `translateY(${finalPosition}px)`;
            console.log('Animation complete, showing result');
            
            // Mostrar resultado (mas ainda invisível)
            const resultDiv = document.getElementById('roulette-result');
            showRouletteResult(winner);
            resultDiv.style.opacity = '0';
            resultDiv.style.transition = 'opacity 0.5s ease-in';
            
            // Após 500ms: fade out da roleta e fade in do resultado simultaneamente
            setTimeout(() => {
              const slotMachineWrapper = document.getElementById('slot-machine-wrapper');
              
              // Fade in do resultado
              resultDiv.style.opacity = '1';
              
              // Fade out da roleta
              if (slotMachineWrapper) {
                slotMachineWrapper.style.transition = 'opacity 0.5s ease-out, max-height 0.5s ease-out, margin 0.5s ease-out, padding 0.5s ease-out';
                slotMachineWrapper.style.opacity = '0';
                
                // Após o fade, colapsar o espaço
                setTimeout(() => {
                  slotMachineWrapper.style.maxHeight = '0';
                  slotMachineWrapper.style.padding = '0';
                  slotMachineWrapper.style.marginTop = '0';
                  slotMachineWrapper.style.marginBottom = '0';
                  slotMachineWrapper.style.border = 'none';
                  
                  setTimeout(() => {
                    slotMachineWrapper.style.display = 'none';
                  }, 500);
                }, 500);
              }
            }, 500);
          }, 200);
        }, 150);
      }
    }

    requestAnimationFrame(animate);
  }

  function showRouletteResult(movie) {
    // Efeitos sonoros visuais
    const resultDiv = document.getElementById('roulette-result');
    
    setTimeout(() => {
      resultDiv.innerHTML = `
        <div class="text-7xl mb-4 animate-bounce">🎉</div>
        <h3 class="text-3xl font-bold text-yellow-400 mb-3 animate-pulse">Filme Escolhido!</h3>
        <p class="text-violet-300 mb-6">A roleta decidiu que vocês vão assistir:</p>
        <div class="bg-gradient-to-br from-violet-950/80 to-fuchsia-950/80 rounded-xl p-6 border-2 border-yellow-400/50 shadow-2xl shadow-yellow-500/30 transform hover:scale-105 transition-all">
          <div class="flex items-center justify-center gap-4 mb-4">
            ${movie.poster_url ? 
              `<img src="${movie.poster_url}" alt="${movie.title}" class="w-24 h-36 object-cover rounded-lg shadow-lg">` :
              ''
            }
            <div class="text-left">
              <h4 class="text-4xl font-bold text-yellow-300 mb-2">${movie.title}</h4>
              <p class="text-2xl text-violet-200">${movie.year ? `(${movie.year})` : ''}</p>
            </div>
          </div>
          <div class="flex justify-center gap-2 mt-4">
            <span class="text-3xl">🍿</span>
            <span class="text-3xl">🎬</span>
            <span class="text-3xl">❤️</span>
          </div>
        </div>
        
        <!-- Botão Girar Novamente dentro do resultado -->
        <button
          id="spin-again-btn"
          class="mt-6 px-8 py-3 bg-violet-600 hover:bg-violet-700 text-white font-semibold rounded-lg transition-all shadow-lg hover:scale-105"
        >
          🔄 Girar Novamente
        </button>
      `;
      
      resultDiv.classList.remove('hidden');
      
      // Adicionar event listener para o novo botão
      document.getElementById('spin-again-btn')?.addEventListener('click', () => {
        console.log('🔄 Girar novamente com os mesmos filmes:', selectedMovies);
        
        // Fade out do resultado
        const resultDiv = document.getElementById('roulette-result');
        resultDiv.style.opacity = '0';
        
        setTimeout(() => {
          // Limpar o resultado
          resultDiv.classList.add('hidden');
          resultDiv.innerHTML = '';
          resultDiv.style.opacity = '1';
          
          // Mostrar o wrapper da slot machine novamente
          const slotMachineWrapper = document.getElementById('slot-machine-wrapper');
          if (slotMachineWrapper) {
            slotMachineWrapper.style.display = 'block';
            slotMachineWrapper.style.maxHeight = 'none';
            slotMachineWrapper.style.padding = '';
            slotMachineWrapper.style.marginTop = '';
            slotMachineWrapper.style.marginBottom = '';
            slotMachineWrapper.style.border = '';
            
            // Fade in do wrapper
            setTimeout(() => {
              slotMachineWrapper.style.opacity = '1';
            }, 50);
          }
          
          // Limpar o carrossel
          const carousel = document.getElementById('roulette-carousel');
          carousel.innerHTML = '';
          carousel.style.transform = 'translateY(0px)';
          
          // Chamar prepareRoulette novamente com os mesmos filmes selecionados
          prepareRoulette();
        }, 500);
      });
      
      // Confetti effect (emoji rain)
      createConfetti();
    }, 800);
  }

  function createConfetti() {
    const emojis = ['🎉', '🎊', '⭐', '✨', '🎬', '🍿', '❤️', '💕'];
    const container = document.getElementById('roulette-spinner');
    
    for (let i = 0; i < 30; i++) {
      setTimeout(() => {
        const confetti = document.createElement('div');
        confetti.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        confetti.style.position = 'absolute';
        // Limitar entre 10% e 90% para evitar que saia das bordas
        confetti.style.left = (Math.random() * 80 + 10) + '%';
        confetti.style.top = '-50px';
        confetti.style.fontSize = Math.random() * 20 + 20 + 'px';
        confetti.style.opacity = '0';
        confetti.style.transition = 'all 3s ease-out';
        confetti.style.pointerEvents = 'none';
        confetti.style.zIndex = '30';
        
        container.appendChild(confetti);
        
        setTimeout(() => {
          confetti.style.top = '100%';
          confetti.style.opacity = '1';
          // Reduzir translateX para ±50px ao invés de ±100px
          confetti.style.transform = `rotate(${Math.random() * 360}deg) translateX(${Math.random() * 100 - 50}px)`;
        }, 50);
        
        setTimeout(() => {
          confetti.remove();
        }, 3000);
      }, i * 100);
    }
  }

  // ==================== JOGO DE ADIVINHAÇÃO ====================
  const watchedMovies = <%- JSON.stringify(watchedMovies) %>;
  const currentUserId = <%= currentUserId %>;
  const gameModal = document.getElementById('rating-game-modal');
  const gameModalContent = document.getElementById('game-modal-content');
  let gameMovies = [];
  let currentGameIndex = 0;
  let gameScore = 0;
  let gameErrors = 0;
  let gameStreak = 0;
  let maxStreak = 0;

  document.getElementById('open-game-btn')?.addEventListener('click', () => {
    // Filtrar filmes que o parceiro avaliou
    gameMovies = watchedMovies.filter(m => m.hasPartnerRated);
    
    if (gameMovies.length === 0) {
      window.showToast('Seu parceiro ainda não avaliou nenhum filme!', 'error');
      return;
    }

    // Embaralhar
    gameMovies = gameMovies.sort(() => Math.random() - 0.5);
    startGame();
  });

  function startGame() {
    currentGameIndex = 0;
    gameScore = 0;
    gameErrors = 0;
    gameStreak = 0;
    maxStreak = 0;

    document.getElementById('game-question').classList.remove('hidden');
    document.getElementById('game-options').classList.remove('hidden');
    document.getElementById('game-feedback').classList.add('hidden');
    document.getElementById('game-next-btn').classList.add('hidden');
    document.getElementById('game-over').classList.add('hidden');
    document.getElementById('game-restart-btn').classList.add('hidden');

    updateGameDisplay();
    
    gameModal.classList.remove('hidden');
    setTimeout(() => {
      gameModal.style.opacity = '1';
      gameModalContent.style.transform = 'scale(1)';
    }, 10);
  }

  function updateGameDisplay() {
    const movie = gameMovies[currentGameIndex];
    document.getElementById('game-poster').src = movie.poster_url || '';
    document.getElementById('game-title').textContent = movie.title;
    document.getElementById('game-year').textContent = movie.year ? `(${movie.year})` : '';
    document.getElementById('game-score').textContent = gameScore;
    document.getElementById('game-errors').textContent = gameErrors;
    document.getElementById('game-streak').textContent = gameStreak;

    // Resetar botões
    document.querySelectorAll('.game-option-btn').forEach(btn => {
      btn.disabled = false;
      btn.classList.remove('bg-green-600', 'bg-red-600', 'border-green-500', 'border-red-500');
      btn.classList.add('bg-violet-900/30', 'border-violet-700/40');
    });
  }

  document.querySelectorAll('.game-option-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const selectedRating = parseInt(this.dataset.rating);
      const movie = gameMovies[currentGameIndex];
      const correctRating = movie.partnerRating;

      // Desabilitar todos os botões
      document.querySelectorAll('.game-option-btn').forEach(b => b.disabled = true);

      const feedback = document.getElementById('game-feedback');
      const feedbackText = document.getElementById('feedback-text');
      const feedbackDetail = document.getElementById('feedback-detail');

      if (selectedRating === correctRating) {
        // ACERTOU
        gameScore++;
        gameStreak++;
        maxStreak = Math.max(maxStreak, gameStreak);

        this.classList.remove('bg-violet-900/30', 'border-violet-700/40');
        this.classList.add('bg-green-600', 'border-green-500');

        feedback.classList.remove('hidden', 'bg-red-950/50', 'border-red-700/30');
        feedback.classList.add('bg-green-950/50', 'border-green-700/30');
        feedbackText.textContent = '🎉 Correto!';
        feedbackText.className = 'text-lg font-semibold mb-2 text-green-300';
        feedbackDetail.textContent = `Você realmente conhece o gosto do seu parceiro! +${gameStreak} streak`;
        feedbackDetail.className = 'text-sm text-green-200';
      } else {
        // ERROU
        gameErrors++;
        gameStreak = 0;

        this.classList.remove('bg-violet-900/30', 'border-violet-700/40');
        this.classList.add('bg-red-600', 'border-red-500');

        // Mostrar resposta correta
        document.querySelectorAll('.game-option-btn').forEach(b => {
          if (parseInt(b.dataset.rating) === correctRating) {
            b.classList.remove('bg-violet-900/30', 'border-violet-700/40');
            b.classList.add('bg-green-600', 'border-green-500');
          }
        });

        feedback.classList.remove('hidden', 'bg-green-950/50', 'border-green-700/30');
        feedback.classList.add('bg-red-950/50', 'border-red-700/30');
        feedbackText.textContent = '❌ Ops! Errou...';
        feedbackText.className = 'text-lg font-semibold mb-2 text-red-300';
        feedbackDetail.textContent = `A resposta correta era ${correctRating} estrelas`;
        feedbackDetail.className = 'text-sm text-red-200';
      }

      updateGameDisplay();

      // Mostrar botão de próximo ou fim
      currentGameIndex++;
      if (currentGameIndex < gameMovies.length) {
        document.getElementById('game-next-btn').classList.remove('hidden');
      } else {
        endGame();
      }
    });
  });

  document.getElementById('game-next-btn')?.addEventListener('click', () => {
    document.getElementById('game-feedback').classList.add('hidden');
    document.getElementById('game-next-btn').classList.add('hidden');
    document.getElementById('game-question').classList.remove('hidden');
    document.getElementById('game-options').classList.remove('hidden');
    updateGameDisplay();
  });

  function endGame() {
    document.getElementById('game-question').classList.add('hidden');
    document.getElementById('game-options').classList.add('hidden');
    document.getElementById('game-feedback').classList.add('hidden');
    document.getElementById('game-next-btn').classList.add('hidden');
    document.getElementById('game-over').classList.remove('hidden');
    document.getElementById('game-restart-btn').classList.remove('hidden');

    const total = gameScore + gameErrors;
    const accuracy = total > 0 ? Math.round((gameScore / total) * 100) : 0;

    document.getElementById('final-score').textContent = gameScore;
    document.getElementById('final-total').textContent = total;
    document.getElementById('final-accuracy').textContent = accuracy + '%';
    document.getElementById('final-streak').textContent = maxStreak;
  }

  document.getElementById('game-restart-btn')?.addEventListener('click', () => {
    gameMovies = gameMovies.sort(() => Math.random() - 0.5);
    startGame();
  });

  document.getElementById('close-game-btn')?.addEventListener('click', () => {
    gameModal.style.opacity = '0';
    gameModalContent.style.transform = 'scale(0.9)';
    setTimeout(() => gameModal.classList.add('hidden'), 300);
  });

})();
</script>
