<style>
  /* Custom scrollbar para modais */
  .scrollbar-thin::-webkit-scrollbar {
    width: 8px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: rgba(76, 29, 149, 0.2);
    border-radius: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: rgb(124, 58, 237);
    border-radius: 4px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: rgb(139, 92, 246);
  }

  @keyframes slideIn {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .recipe-card {
    animation: slideIn 0.3s ease-out;
  }

  /* Image editor styles */
  .image-editor-container {
    position: relative;
      // Estado do editor de imagem
  const imageEditorState = {
    isDragging: false,
    startX: 0,
    startY: 0,
    offsetX: 0,  // Deslocamento real da imagem em X
    offsetY: 0,  // Deslocamento real da imagem em Y
    scale: 1,
    originalFile: null,
    editorImageSize: 300  // Tamanho de refer√™ncia do editor (ser√° atualizado no onload)
  };%;
    height: 300px;
    overflow: hidden;
    background: #1a0b2e;
    border-radius: 8px;
    cursor: move;
    touch-action: none;
  }

  .image-editor-container img {
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: center center;
    user-select: none;
    -webkit-user-drag: none;
    max-height: 100%;
    max-width: none;
    object-fit: contain;
  }

  /* Overlay de crop - mostra a √°rea que aparecer√° no card */
  .crop-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: 10;
  }

  .crop-frame {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 385px;
    height: 280px; /* Aspect ratio 4:3 */
    border: 3px solid rgba(124, 58, 237, 0.9);
    border-radius: 8px;
    box-shadow: 
      0 0 0 9999px rgba(0, 0, 0, 0.6),
      0 0 20px rgba(124, 58, 237, 0.5),
      inset 0 0 20px rgba(124, 58, 237, 0.3);
  }

  .crop-frame::before {
    content: '';
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(124, 58, 237, 0.95);
    color: white;
    padding: 4px 12px;
    border-radius: 6px;
    font-size: 11px;
    font-weight: 600;
    white-space: nowrap;
    content: '√Årea vis√≠vel no card';
  }

  /* Linhas guia de regra dos ter√ßos */
  .crop-frame::after {
    content: '';
    position: absolute;
    inset: 0;
    background: 
      linear-gradient(to right, transparent 33.33%, rgba(124, 58, 237, 0.3) 33.33%, rgba(124, 58, 237, 0.3) 33.43%, transparent 33.43%, transparent 66.66%, rgba(124, 58, 237, 0.3) 66.66%, rgba(124, 58, 237, 0.3) 66.76%, transparent 66.76%),
      linear-gradient(to bottom, transparent 33.33%, rgba(124, 58, 237, 0.3) 33.33%, rgba(124, 58, 237, 0.3) 33.43%, transparent 33.43%, transparent 66.66%, rgba(124, 58, 237, 0.3) 66.66%, rgba(124, 58, 237, 0.3) 66.76%, transparent 66.76%);
  }

  /* Cantos da moldura */
  .crop-corner {
    position: absolute;
    width: 20px;
    height: 20px;
    border: 3px solid white;
  }

  .crop-corner.top-left {
    top: -3px;
    left: -3px;
    border-right: none;
    border-bottom: none;
    border-top-left-radius: 8px;
  }

  .crop-corner.top-right {
    top: -3px;
    right: -3px;
    border-left: none;
    border-bottom: none;
    border-top-right-radius: 8px;
  }

  .crop-corner.bottom-left {
    bottom: -3px;
    left: -3px;
    border-right: none;
    border-top: none;
    border-bottom-left-radius: 8px;
  }

  .crop-corner.bottom-right {
    bottom: -3px;
    right: -3px;
    border-left: none;
    border-top: none;
    border-bottom-right-radius: 8px;
  }

  .image-editor-controls {
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: center;
    margin-top: 12px;
  }

  .zoom-btn {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    border: 1px solid rgba(124, 58, 237, 0.5);
    background: rgba(124, 58, 237, 0.2);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
  }

  .zoom-btn:hover {
    background: rgba(124, 58, 237, 0.4);
    border-color: rgba(124, 58, 237, 0.8);
  }

  .zoom-slider {
    flex: 1;
    max-width: 200px;
    height: 4px;
    -webkit-appearance: none;
    appearance: none;
    background: rgba(124, 58, 237, 0.3);
    border-radius: 2px;
    outline: none;
  }

  .zoom-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: rgb(124, 58, 237);
    cursor: pointer;
  }

  .zoom-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: rgb(124, 58, 237);
    cursor: pointer;
    border: none;
  }
</style>

<div class="container mx-auto px-2 sm:px-4 py-4 sm:py-8 max-w-7xl">
  <div class="glass rounded-xl sm:rounded-2xl border border-violet-700/30 bg-white/5 p-4 sm:p-6 md:p-8">
    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6 sm:mb-8">
      <h1 class="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-violet-400 to-fuchsia-400 bg-clip-text text-transparent">
        üç≥ Nossas Receitas
      </h1>
      <button 
        id="add-recipe-btn"
        class="w-full sm:w-auto px-4 sm:px-6 py-2.5 bg-gradient-to-r from-violet-600 to-fuchsia-600 hover:from-violet-700 hover:to-fuchsia-700 text-white rounded-lg font-medium transition-all shadow-lg hover:shadow-violet-500/50 hover:scale-105 text-sm sm:text-base"
      >
        <svg class="inline-block w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Nova Receita
      </button>
    </div>

    <% if (recipes.length === 0) { %>
      <div class="text-center py-12 sm:py-16">
        <div class="text-6xl sm:text-8xl mb-4">üë®‚Äçüç≥</div>
        <h3 class="text-xl sm:text-2xl font-bold text-violet-200 mb-2">Nenhuma receita ainda</h3>
        <p class="text-sm sm:text-base text-violet-400 mb-6">Comece adicionando suas receitas favoritas!</p>
        <button 
          class="add-recipe-trigger px-6 py-2.5 bg-gradient-to-r from-violet-600 to-fuchsia-600 hover:from-violet-700 hover:to-fuchsia-700 text-white rounded-lg font-medium transition-all shadow-lg text-sm sm:text-base"
        >
          Adicionar primeira receita
        </button>
      </div>
    <% } else { %>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
        <% recipes.forEach(recipe => { %>
          <%- include('_recipe_card', { recipe }) %>
        <% }) %>
      </div>
    <% } %>
  </div>
</div>

<%- include('_add_recipe_modal') %>
<%- include('_edit_recipe_modal') %>
<%- include('_recipe_detail_modal') %>

<script>
(function() {
  // Modais
  const addModal = document.getElementById('add-recipe-modal');
  const editModal = document.getElementById('edit-recipe-modal');
  const detailModal = document.getElementById('recipe-detail-modal');

  // Abrir modal de adicionar
  document.querySelectorAll('#add-recipe-btn, .add-recipe-trigger').forEach(btn => {
    btn.addEventListener('click', () => {
      openAddRecipeModal();
    });
  });

  function openAddRecipeModal() {
    document.getElementById('add-recipe-form').reset();
    document.getElementById('photo-preview').classList.add('hidden');
    addModal.classList.remove('hidden');
    setTimeout(() => {
      addModal.style.opacity = '1';
      document.getElementById('add-recipe-content').style.transform = 'scale(1)';
    }, 10);
  }

  function closeAddRecipeModal() {
    addModal.style.opacity = '0';
    document.getElementById('add-recipe-content').style.transform = 'scale(0.9)';
    setTimeout(() => addModal.classList.add('hidden'), 300);
  }

  document.getElementById('close-add-recipe-btn')?.addEventListener('click', closeAddRecipeModal);
  addModal?.addEventListener('click', (e) => {
    if (e.target === addModal) closeAddRecipeModal();
  });

  // Preview de foto ao adicionar
  document.getElementById('recipe-photo')?.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const preview = document.getElementById('photo-preview');
        preview.querySelector('img').src = e.target.result;
        preview.classList.remove('hidden');
      };
      reader.readAsDataURL(file);
    }
  });

  // Submeter nova receita
  document.getElementById('add-recipe-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
    
    try {
      const response = await fetch('/recipes', {
        method: 'POST',
        headers: {
          'X-CSRF-Token': csrfToken
        },
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        window.showToast('Receita adicionada com sucesso!');
        closeAddRecipeModal();
        setTimeout(() => location.reload(), 500);
      } else {
        throw new Error(data.error || 'Erro ao adicionar receita');
      }
    } catch (error) {
      console.error('Erro:', error);
      window.showToast(error.message || 'Erro ao adicionar receita', 'error');
    }
  });

  // Toast
  window.showToast = function (message, type = "success") {
    const toast = document.createElement("div");
    toast.className = `fixed bottom-4 sm:bottom-6 right-4 sm:right-6 px-4 sm:px-6 py-2 sm:py-3 rounded-lg shadow-lg text-white font-medium transition-all duration-300 z-50 text-sm sm:text-base ${type === "error" ? "bg-red-500" : "bg-green-500"}`;
    toast.textContent = message;
    toast.style.opacity = "0";
    toast.style.transform = "translateY(20px)";
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = "1";
      toast.style.transform = "translateY(0)";
    }, 10);
    
    setTimeout(() => {
      toast.style.opacity = "0";
      toast.style.transform = "translateY(20px)";
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  };

  // Delega√ß√£o de eventos para cards
  document.addEventListener('click', async (e) => {
    // Abrir detalhes
    const detailBtn = e.target.closest('.view-recipe-btn');
    if (detailBtn) {
      const recipeId = detailBtn.dataset.recipeId;
      openRecipeDetail(recipeId);
      return;
    }

    // Avaliar receita
    const ratingBtn = e.target.closest('.rating-btn');
    if (ratingBtn) {
      const rating = parseInt(ratingBtn.dataset.rating);
      const recipeId = ratingBtn.dataset.recipeId;
      await rateRecipe(recipeId, rating);
      return;
    }

    // Deletar receita
    const deleteBtn = e.target.closest('.delete-recipe-btn');
    if (deleteBtn) {
      if (confirm('Tem certeza que deseja deletar esta receita?')) {
        const recipeId = deleteBtn.dataset.recipeId;
        await deleteRecipe(recipeId);
      }
      return;
    }
  });

  async function rateRecipe(recipeId, rating) {
    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
      
      const response = await fetch(`/recipes/${recipeId}/rating`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({ rating })
      });

      const data = await response.json();

      if (data.success) {
        window.showToast(`Avalia√ß√£o de ${rating} üòã salva!`);
        setTimeout(() => location.reload(), 500);
      } else {
        throw new Error(data.error || 'Erro ao avaliar');
      }
    } catch (error) {
      console.error('Erro:', error);
      window.showToast(error.message || 'Erro ao avaliar receita', 'error');
    }
  }

  async function deleteRecipe(recipeId) {
    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
      
      const response = await fetch(`/recipes/${recipeId}`, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': csrfToken
        }
      });

      const data = await response.json();

      if (data.success) {
        window.showToast('Receita deletada com sucesso!');
        setTimeout(() => location.reload(), 500);
      } else {
        throw new Error(data.error || 'Erro ao deletar');
      }
    } catch (error) {
      console.error('Erro:', error);
      window.showToast(error.message || 'Erro ao deletar receita', 'error');
    }
  }

  function openRecipeDetail(recipeId) {
    const recipes = <%- JSON.stringify(recipes) %>;
    const recipe = recipes.find(r => r.id == recipeId);
    
    if (!recipe) return;

    // Salvar dados do crop no estado global para usar no editor
    window.currentRecipeCropData = {
      crop_x: recipe.crop_x || 0,
      crop_y: recipe.crop_y || 0,
      crop_scale: recipe.crop_scale || 1
    };

    const modal = document.getElementById('recipe-detail-modal');
    const content = document.getElementById('recipe-detail-content');

    // Preencher conte√∫do
    content.innerHTML = `
      <div class="space-y-4 sm:space-y-6">
        <!-- Foto clic√°vel para editar -->
        <div class="relative">
          <div id="photo-display-${recipe.id}" class="relative group cursor-pointer photo-edit-trigger" data-recipe-id="${recipe.id}">
            ${recipe.photo_path ? `
              <img id="detail-photo-${recipe.id}" src="${recipe.photo_path}" alt="${recipe.title}" class="w-full h-48 sm:h-64 object-cover rounded-lg">
            ` : `
              <div id="detail-photo-${recipe.id}" class="w-full h-48 sm:h-64 bg-violet-900/20 rounded-lg flex items-center justify-center">
                <svg class="w-16 h-16 sm:w-24 sm:h-24 text-violet-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
            `}
            <div class="absolute inset-0 bg-black/50 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
              <div class="text-white text-center">
                <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                <span class="text-sm font-medium">Clique para editar foto</span>
              </div>
            </div>
          </div>
          
          <!-- Editor de Imagem (oculto inicialmente) -->
          <div id="photo-editor-${recipe.id}" class="hidden">
            <div class="image-editor-container" id="editor-container-${recipe.id}">
              <img id="editor-image-${recipe.id}" src="" alt="Editor">
              <!-- Overlay de crop -->
              <div class="crop-overlay">
                <div class="crop-frame">
                  <div class="crop-corner top-left"></div>
                  <div class="crop-corner top-right"></div>
                  <div class="crop-corner bottom-left"></div>
                  <div class="crop-corner bottom-right"></div>
                </div>
              </div>
            </div>
            <div class="image-editor-controls">
              <button class="zoom-btn zoom-out-btn" data-recipe-id="${recipe.id}">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                </svg>
              </button>
              <input type="range" class="zoom-slider" id="zoom-slider-${recipe.id}" min="100" max="300" value="100" data-recipe-id="${recipe.id}">
              <button class="zoom-btn zoom-in-btn" data-recipe-id="${recipe.id}">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
              </button>
            </div>
            <div class="flex gap-2 mt-3">
              <button class="cancel-edit-btn flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded-lg transition" data-recipe-id="${recipe.id}">
                Cancelar
              </button>
              <button class="save-edit-btn flex-1 px-4 py-2 bg-violet-600 hover:bg-violet-700 text-white text-sm rounded-lg transition" data-recipe-id="${recipe.id}">
                Salvar Posi√ß√£o
              </button>
            </div>
          </div>
          <input type="file" id="edit-photo-input-${recipe.id}" class="hidden" accept="image/jpeg,image/jpg,image/png,image/webp" data-recipe-id="${recipe.id}">
        </div>

        <div>
          <!-- T√≠tulo edit√°vel -->
          <input 
            type="text" 
            id="detail-title-${recipe.id}"
            value="${recipe.title}"
            class="w-full text-xl sm:text-2xl font-bold text-violet-100 mb-2 bg-violet-900/20 border border-violet-700/30 rounded-lg px-3 py-2 focus:outline-none focus:border-fuchsia-500 title-edit-input"
            data-recipe-id="${recipe.id}"
          />
          ${recipe.reference_link ? `
            <a href="${recipe.reference_link}" target="_blank" rel="noopener noreferrer" class="text-sm text-fuchsia-400 hover:text-fuchsia-300 inline-flex items-center gap-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
              </svg>
              Ver receita original
            </a>
          ` : ''}
        </div>

        <!-- Avalia√ß√µes e Coment√°rios -->
        <div class="space-y-4">
          <!-- Sua avalia√ß√£o -->
          <div class="glass rounded-lg p-4 border border-violet-700/30">
            <div class="flex justify-between items-start mb-3">
              <span class="text-sm font-medium text-violet-300">Sua avalia√ß√£o</span>
              <div class="flex gap-1">
                ${[1,2,3,4,5].map(i => `
                  <button class="rating-btn p-1 transition-transform hover:scale-110" data-rating="${i}" data-recipe-id="${recipe.id}">
                    <span class="text-xl sm:text-2xl ${recipe.currentUserRating >= i ? 'opacity-100' : 'opacity-30'}">${'üòã'}</span>
                  </button>
                `).join('')}
              </div>
            </div>
            <textarea 
              id="current-user-comment"
              class="w-full bg-violet-900/20 border border-violet-700/30 rounded-lg px-3 py-2 text-sm text-violet-100 placeholder-violet-500 focus:outline-none focus:border-fuchsia-500 resize-none"
              rows="3"
              placeholder="Escreva seu coment√°rio..."
            >${recipe.currentUserComment || ''}</textarea>
            <button 
              class="save-comment-btn mt-2 px-4 py-1.5 bg-violet-600 hover:bg-violet-700 text-white text-sm rounded-lg transition"
              data-recipe-id="${recipe.id}"
            >
              Salvar coment√°rio
            </button>
          </div>

          <!-- Avalia√ß√£o do parceiro -->
          <div class="glass rounded-lg p-4 border border-violet-700/30">
            <div class="flex justify-between items-start mb-3">
              <span class="text-sm font-medium text-violet-300">Avalia√ß√£o do parceiro</span>
              <div class="flex gap-1">
                ${[1,2,3,4,5].map(i => `
                  <span class="text-xl sm:text-2xl ${recipe.partnerRating >= i ? 'opacity-100' : 'opacity-30'}">${'üòã'}</span>
                `).join('')}
              </div>
            </div>
            ${recipe.partnerComment ? `
              <p class="text-sm text-violet-200 italic">"${recipe.partnerComment}"</p>
            ` : `
              <p class="text-sm text-violet-500 italic">Ainda n√£o comentou</p>
            `}
          </div>

          ${recipe.hasCurrentUserRated && recipe.hasPartnerRated ? `
            <div class="text-center pt-2 border-t border-violet-700/30">
              <span class="text-sm text-violet-300">Avalia√ß√£o m√©dia: </span>
              <span class="text-2xl font-bold text-yellow-400">
                ${((recipe.currentUserRating + recipe.partnerRating) / 2).toFixed(1)}
              </span>
              <span class="text-lg">üòã</span>
            </div>
          ` : ''}
        </div>
      </div>
    `;

    modal.classList.remove('hidden');
    setTimeout(() => {
      modal.style.opacity = '1';
      document.querySelector('#recipe-detail-modal .glass').style.transform = 'scale(1)';
    }, 10);

    // Configurar event listeners ap√≥s carregar o conte√∫do
    setTimeout(() => {
      // Listener para clicar na foto (abre editor se foto existe, ou file picker se n√£o existe)
      const photoTrigger = document.querySelector('.photo-edit-trigger');
      if (photoTrigger) {
        photoTrigger.addEventListener('click', () => {
          const recipeId = photoTrigger.dataset.recipeId;
          const hasPhoto = recipe.photo_path;
          
          if (hasPhoto) {
            // Se tem foto, abre o editor
            openPhotoEditor(recipeId, recipe.photo_path);
          } else {
            // Se n√£o tem foto, abre file picker
            document.getElementById(`edit-photo-input-${recipeId}`).click();
          }
        });
      }

      // Listener para mudan√ßa de foto (upload nova)
      const photoInput = document.querySelector(`#edit-photo-input-${recipeId}`);
      if (photoInput) {
        photoInput.addEventListener('change', (e) => {
          const recipeId = e.target.dataset.recipeId;
          const file = e.target.files[0];
          if (file) {
            // Ao selecionar nova foto, abre o editor
            const reader = new FileReader();
            reader.onload = (event) => {
              openPhotoEditor(recipeId, event.target.result, file);
            };
            reader.readAsDataURL(file);
          }
        });
      }

      // Listener para t√≠tulo (blur = quando sai do campo)
      const titleInput = document.querySelector('.title-edit-input');
      if (titleInput) {
        titleInput.addEventListener('blur', (e) => {
          const recipeId = e.target.dataset.recipeId;
          const title = e.target.value;
          updateRecipeTitle(recipeId, title);
        });
      }

      // Listener para bot√£o de salvar coment√°rio
      const saveCommentBtn = document.querySelector('.save-comment-btn');
      if (saveCommentBtn) {
        saveCommentBtn.addEventListener('click', () => {
          const recipeId = saveCommentBtn.dataset.recipeId;
          const comment = document.getElementById('current-user-comment').value;
          saveComment(recipeId, comment);
        });
      }

      // Listeners para editor de imagem
      const zoomSlider = document.getElementById(`zoom-slider-${recipeId}`);
      const zoomInBtn = document.querySelector('.zoom-in-btn');
      const zoomOutBtn = document.querySelector('.zoom-out-btn');
      const cancelBtn = document.querySelector('.cancel-edit-btn');
      const saveEditBtn = document.querySelector('.save-edit-btn');

      if (zoomSlider) {
        zoomSlider.addEventListener('input', (e) => {
          updateImageZoom(recipeId, e.target.value);
        });
      }

      if (zoomInBtn) {
        zoomInBtn.addEventListener('click', () => {
          const slider = document.getElementById(`zoom-slider-${recipeId}`);
          const newValue = Math.min(300, parseInt(slider.value) + 20);
          slider.value = newValue;
          updateImageZoom(recipeId, newValue);
        });
      }

      if (zoomOutBtn) {
        zoomOutBtn.addEventListener('click', () => {
          const slider = document.getElementById(`zoom-slider-${recipeId}`);
          const newValue = Math.max(100, parseInt(slider.value) - 20);
          slider.value = newValue;
          updateImageZoom(recipeId, newValue);
        });
      }

      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => {
          closePhotoEditor(recipeId);
        });
      }

      if (saveEditBtn) {
        saveEditBtn.addEventListener('click', () => {
          savePhotoEdit(recipeId);
        });
      }
    }, 50);
  }

  function closeRecipeDetail() {
    const modal = document.getElementById('recipe-detail-modal');
    modal.style.opacity = '0';
    document.querySelector('#recipe-detail-modal .glass').style.transform = 'scale(0.9)';
    setTimeout(() => modal.classList.add('hidden'), 300);
  }

  document.getElementById('close-recipe-detail-btn')?.addEventListener('click', closeRecipeDetail);
  detailModal?.addEventListener('click', (e) => {
    if (e.target === detailModal) closeRecipeDetail();
  });

  window.saveComment = async function(recipeId, comment) {
    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
      
      const response = await fetch(`/recipes/${recipeId}/comment`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({ comment })
      });

      const data = await response.json();

      if (data.success) {
        window.showToast('Coment√°rio salvo!');
        setTimeout(() => location.reload(), 500);
      } else {
        throw new Error(data.error || 'Erro ao salvar coment√°rio');
      }
    } catch (error) {
      console.error('Erro:', error);
      window.showToast(error.message || 'Erro ao salvar coment√°rio', 'error');
    }
  };

  // Atualizar t√≠tulo da receita
  window.updateRecipeTitle = async function(recipeId, title) {
    if (!title || !title.trim()) {
      window.showToast('T√≠tulo n√£o pode estar vazio', 'error');
      return;
    }

    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
      const formData = new FormData();
      formData.append('title', title.trim());

      const response = await fetch(`/recipes/${recipeId}`, {
        method: 'PUT',
        headers: {
          'X-CSRF-Token': csrfToken
        },
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        window.showToast('T√≠tulo atualizado!');
      } else {
        throw new Error(data.error || 'Erro ao atualizar t√≠tulo');
      }
    } catch (error) {
      console.error('Erro:', error);
      window.showToast(error.message || 'Erro ao atualizar t√≠tulo', 'error');
    }
  };

  // Estado do editor de imagem
  let imageEditorState = {
    isDragging: false,
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0,
    scale: 1,
    originalFile: null
  };

  // Abrir editor de foto
  function openPhotoEditor(recipeId, imageSrc, file = null) {
    const display = document.getElementById(`photo-display-${recipeId}`);
    const editor = document.getElementById(`photo-editor-${recipeId}`);
    const editorImage = document.getElementById(`editor-image-${recipeId}`);
    const container = document.getElementById(`editor-container-${recipeId}`);

    // Salvar arquivo original se for upload novo
    if (file) {
      imageEditorState.originalFile = file;
    }

    // Carregar imagem no editor ANTES de mostrar
    editorImage.src = imageSrc;
    
    // Aguardar carregamento da imagem
    editorImage.onload = () => {
      // Mostrar editor, ocultar display (DEPOIS que a imagem carregar)
      display.classList.add('hidden');
      editor.classList.remove('hidden');
      
      // Guardar dimens√£o de refer√™ncia do editor (para normaliza√ß√£o)
      imageEditorState.editorImageSize = Math.min(editorImage.offsetWidth, editorImage.offsetHeight);
      
      // Carregar metadados do crop existentes (valores normalizados)
      const cropData = window.currentRecipeCropData || { crop_x: 0, crop_y: 0, crop_scale: 1 };
      
      // Desnormalizar: converter propor√ß√£o de volta para pixels do editor
      imageEditorState.offsetX = cropData.crop_x * imageEditorState.editorImageSize;
      imageEditorState.offsetY = cropData.crop_y * imageEditorState.editorImageSize;
      imageEditorState.scale = cropData.crop_scale;
      
      // Atualizar slider com o valor do crop salvo
      const zoomValue = Math.round(cropData.crop_scale * 100);
      document.getElementById(`zoom-slider-${recipeId}`).value = zoomValue;
      
      // Debug: Dimens√µes do editor e imagem
      console.log('=== EDITOR - Dimens√µes ===');
      console.log('Container:', { width: container.offsetWidth, height: container.offsetHeight });
      console.log('Imagem natural:', { width: editorImage.naturalWidth, height: editorImage.naturalHeight });
      console.log('Imagem renderizada:', { width: editorImage.offsetWidth, height: editorImage.offsetHeight });
      console.log('Tamanho de refer√™ncia para normaliza√ß√£o:', imageEditorState.editorImageSize);
      console.log('Moldura de crop: 280x210px (√°rea vis√≠vel)');
      console.log('Propor√ß√£o moldura vs imagem:', { 
        horizontal: 280 / imageEditorState.editorImageSize,
        vertical: 210 / imageEditorState.editorImageSize 
      });
      console.log('Valores desnormalizados:', {
        normalized: cropData,
        pixels: { x: imageEditorState.offsetX, y: imageEditorState.offsetY }
      });
      
      // Aplicar transforma√ß√£o inicial (com os valores salvos)
      updateImageTransform(recipeId);
      setupImageDragging(recipeId, container, editorImage);
    };
  }

  // Configurar arrastar imagem
  function setupImageDragging(recipeId, container, image) {
    const handleStart = (e) => {
      imageEditorState.isDragging = true;
      
      const clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
      const clientY = e.type.includes('mouse') ? e.clientY : e.touches[0].clientY;
      
      // Guardar posi√ß√£o inicial do mouse/touch
      imageEditorState.startX = clientX;
      imageEditorState.startY = clientY;
      
      updateImageTransform(recipeId);
    };

    const handleMove = (e) => {
      if (!imageEditorState.isDragging) return;
      e.preventDefault();
      
      const clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
      const clientY = e.type.includes('mouse') ? e.clientY : e.touches[0].clientY;
      
      // Calcular quanto o mouse/touch se moveu desde o in√≠cio do drag
      const deltaX = clientX - imageEditorState.startX;
      const deltaY = clientY - imageEditorState.startY;
      
      // Atualizar a posi√ß√£o inicial para o pr√≥ximo movimento
      imageEditorState.startX = clientX;
      imageEditorState.startY = clientY;
      
      // Acumular o deslocamento
      imageEditorState.offsetX += deltaX;
      imageEditorState.offsetY += deltaY;
      
      updateImageTransform(recipeId);
    };

    const handleEnd = () => {
      imageEditorState.isDragging = false;
      updateImageTransform(recipeId);
    };

    // Mouse events
    container.addEventListener('mousedown', handleStart);
    document.addEventListener('mousemove', handleMove);
    document.addEventListener('mouseup', handleEnd);

    // Touch events
    container.addEventListener('touchstart', handleStart);
    document.addEventListener('touchmove', handleMove, { passive: false });
    document.addEventListener('touchend', handleEnd);
  }

  // Atualizar zoom da imagem
  function updateImageZoom(recipeId, value) {
    imageEditorState.scale = value / 100;
    updateImageTransform(recipeId);
  }

  // Aplicar transforma√ß√£o na imagem
  function updateImageTransform(recipeId) {
    const image = document.getElementById(`editor-image-${recipeId}`);
    // A imagem j√° est√° centralizada com top: 50%, left: 50%
    // O transform adiciona o deslocamento do usu√°rio + escala
    image.style.transform = `translate(calc(-50% + ${imageEditorState.offsetX}px), calc(-50% + ${imageEditorState.offsetY}px)) scale(${imageEditorState.scale})`;
    image.style.cursor = imageEditorState.isDragging ? 'grabbing' : 'grab';
  }

  // Fechar editor
  function closePhotoEditor(recipeId) {
    const display = document.getElementById(`photo-display-${recipeId}`);
    const editor = document.getElementById(`photo-editor-${recipeId}`);
    
    display.classList.remove('hidden');
    editor.classList.add('hidden');
    
    imageEditorState.originalFile = null;
  }

  // Salvar edi√ß√£o (salvar apenas metadados do crop, n√£o gera nova imagem)
  async function savePhotoEdit(recipeId) {
    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
      
      // Normalizar valores: salvar como propor√ß√£o do tamanho da imagem renderizada
      // Isso garante que funcione em qualquer tamanho de card
      const normalizedX = imageEditorState.offsetX / imageEditorState.editorImageSize;
      const normalizedY = imageEditorState.offsetY / imageEditorState.editorImageSize;
      
      // Debug: verificar valores antes de salvar
      console.log('Salvando crop com valores normalizados:', {
        offset_pixels: { x: imageEditorState.offsetX, y: imageEditorState.offsetY },
        editor_size: imageEditorState.editorImageSize,
        normalized: { x: normalizedX, y: normalizedY },
        scale: imageEditorState.scale
      });
      
      // Enviar metadados do crop para o servidor (valores normalizados)
      const response = await fetch(`/recipes/${recipeId}/crop`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({
          crop_x: normalizedX,
          crop_y: normalizedY,
          crop_scale: imageEditorState.scale
        })
      });

      const data = await response.json();

      if (data.success) {
        window.showToast('Enquadramento salvo!');
        setTimeout(() => location.reload(), 500);
      } else {
        throw new Error(data.error || 'Erro ao salvar enquadramento');
      }

      closePhotoEditor(recipeId);
    } catch (error) {
      console.error('Erro ao salvar edi√ß√£o:', error);
      window.showToast(error.message || 'Erro ao salvar enquadramento', 'error');
    }
  }

  // Atualizar foto da receita
  window.updateRecipePhoto = async function(recipeId, file) {
    if (!file) return;

    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
      const formData = new FormData();
      formData.append('photo', file);

      const response = await fetch(`/recipes/${recipeId}`, {
        method: 'PUT',
        headers: {
          'X-CSRF-Token': csrfToken
        },
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        window.showToast('Foto atualizada!');
        setTimeout(() => location.reload(), 800);
      } else {
        throw new Error(data.error || 'Erro ao atualizar foto');
      }
    } catch (error) {
      console.error('Erro:', error);
      window.showToast(error.message || 'Erro ao atualizar foto', 'error');
    }
  };

  // Debug: Logar valores de crop dos cards quando carregarem
  document.querySelectorAll('.recipe-card-image').forEach(img => {
    img.addEventListener('load', function() {
      const recipeId = this.dataset.recipeId;
      const normalizedX = parseFloat(this.dataset.cropXNormalized || 0);
      const normalizedY = parseFloat(this.dataset.cropYNormalized || 0);
      const editorScale = parseFloat(this.dataset.cropScale || 1);
      
      // Calcular tamanho renderizado da imagem no card
      const cardImageSize = Math.min(this.offsetWidth, this.offsetHeight);
      
      // CORRE√á√ÉO: Ajustar scale para compensar diferen√ßa entre moldura e card
      // Moldura no editor: 280x210px (refer√™ncia para o crop)
      // Card: 264x198px (onde ser√° exibido)
      // Card √© menor que moldura, ent√£o precisamos escalar mais
      const cropFrameWidth = 280;  // Largura da moldura no editor
      const cardContainer = this.parentElement;
      const cardWidth = cardContainer.offsetWidth;  // Largura real do card
      
      // Fator de corre√ß√£o: card / moldura
      const scaleCorrection = cropFrameWidth / cardWidth;  // 280/264 = 1.0606
      
      // Scale ajustado: aplicar corre√ß√£o ao scale do editor
      const cardScale = editorScale * scaleCorrection;
      
      // Converter valores normalizados para pixels do card
      const offsetXPixels = normalizedX * cardImageSize;
      const offsetYPixels = normalizedY * cardImageSize;
      
      // Aplicar transform com scale corrigido
      this.style.transform = `translate(calc(-50% + ${offsetXPixels}px), calc(-50% + ${offsetYPixels}px)) scale(${cardScale})`;
      
      console.log('=== CARD - Dimens√µes ===');
      console.log(`Card ${recipeId} - Container:`, { width: cardContainer.offsetWidth, height: cardContainer.offsetHeight });
      console.log(`Card ${recipeId} - Imagem natural:`, { width: this.naturalWidth, height: this.naturalHeight });
      console.log(`Card ${recipeId} - Imagem renderizada:`, { width: this.offsetWidth, height: this.offsetHeight });
      console.log(`Card ${recipeId} - √Årea vis√≠vel do card:`, { width: cardContainer.offsetWidth, height: cardContainer.offsetHeight });
      console.log(`Card ${recipeId} - Scale do editor:`, editorScale);
      console.log(`Card ${recipeId} - Fator de corre√ß√£o:`, scaleCorrection, `(moldura ${cropFrameWidth}px / card ${cardWidth}px)`);
      console.log(`Card ${recipeId} - Scale corrigido:`, cardScale);
      console.log(`Card ${recipeId} - Valores normalizados:`, { x: normalizedX, y: normalizedY });
      console.log(`Card ${recipeId} - Valores em pixels:`, { x: offsetXPixels, y: offsetYPixels });
    });
  });
})();
</script>
