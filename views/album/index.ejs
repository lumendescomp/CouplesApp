<div class="space-y-6">
  <header class="flex items-center justify-between">
    <h1 class="text-2xl font-semibold text-violet-100">Nosso √°lbum</h1>
    <div class="text-sm text-violet-300"><%= photos.length %>/20 fotos</div>
  </header>

  <!-- Biblioteca de fotos -->
  <section
    class="glass rounded-xl border border-violet-700/40 bg-white/5 p-4 relative"
  >
    <!-- Modal de Confirma√ß√£o da Biblioteca -->
    <div
      id="confirm-modal-library"
      class="absolute inset-0 bg-black/60 backdrop-blur-sm z-50 rounded-xl flex items-center justify-center hidden"
      style="transition: opacity 0.3s ease"
    >
      <div
        class="glass rounded-2xl border border-violet-700/40 bg-gradient-to-br from-violet-900/90 to-fuchsia-900/90 p-6 max-w-md w-full mx-4 shadow-2xl"
        style="transform: scale(0.9); transition: transform 0.3s ease"
      >
        <div class="flex items-start gap-4 mb-4">
          <div
            class="flex-shrink-0 w-12 h-12 rounded-full bg-red-500/20 flex items-center justify-center"
          >
            <svg
              class="w-6 h-6 text-red-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              />
            </svg>
          </div>
          <div class="flex-1">
            <h3 class="text-lg font-semibold text-violet-100 mb-2">
              Confirmar a√ß√£o
            </h3>
            <p
              id="confirm-message-library"
              class="text-violet-200/80 text-sm"
            ></p>
          </div>
        </div>
        <div class="flex gap-3 justify-end">
          <button
            id="confirm-cancel-library"
            class="px-4 py-2 rounded-lg bg-violet-700/30 hover:bg-violet-700/50 text-violet-100 transition-colors"
          >
            Cancelar
          </button>
          <button
            id="confirm-ok-library"
            class="px-4 py-2 rounded-lg bg-red-600 hover:bg-red-700 text-white transition-colors"
          >
            Confirmar
          </button>
        </div>
      </div>
    </div>

    <div class="flex items-center justify-between mb-4">
      <h2 class="text-lg font-medium text-violet-100">
        Biblioteca de Mem√≥rias
      </h2>

      <label
        id="upload-label"
        class="btn-heart px-4 py-2 rounded-full cursor-pointer inline-flex items-center gap-2"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          class="w-4 h-4"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M12 4v16m8-8H4"
          />
        </svg>
        <span id="upload-text">Adicionar M√≠dia</span>
        <input
          type="file"
          name="photo"
          accept="image/*,video/mp4,video/webm,video/quicktime"
          multiple
          class="hidden"
          id="photo-input"
        />
      </label>
    </div>

    <!-- Carrossel de fotos -->
    <div class="relative group">
      <!-- Bot√£o esquerdo -->
      <button
        id="carousel-prev"
        class="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-violet-600/80 hover:bg-violet-600 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity disabled:opacity-0 disabled:cursor-not-allowed"
        aria-label="Anterior"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"
          />
        </svg>
      </button>

      <!-- Container do carrossel -->
      <div
        id="photos-carousel"
        class="flex gap-3 overflow-x-auto scroll-smooth snap-x snap-mandatory"
      >
        <% if (photos.length === 0) { %>
        <div class="w-full text-center text-violet-300/80 py-8 px-4">
          Nenhuma foto ainda. Adicione suas primeiras mem√≥rias! üíï
        </div>
        <% } %> <% photos.forEach(photo => { %> <%- include('_photo_item', {
        photo }) %> <% }) %>
      </div>

      <!-- Bot√£o direito -->
      <button
        id="carousel-next"
        class="absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-violet-600/80 hover:bg-violet-600 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity disabled:opacity-0 disabled:cursor-not-allowed"
        aria-label="Pr√≥ximo"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"
          />
        </svg>
      </button>
    </div>
  </section>

  <!-- Template de cora√ß√£o com 6 slots -->
  <section
    class="glass rounded-xl border border-violet-700/40 bg-white/5 p-6 relative"
  >
    <!-- Modal de Confirma√ß√£o dos Slots -->
    <div
      id="confirm-modal-slots"
      class="absolute inset-0 bg-black/60 backdrop-blur-sm z-50 rounded-xl flex items-center justify-center hidden"
      style="transition: opacity 0.3s ease"
    >
      <div
        class="glass rounded-2xl border border-violet-700/40 bg-gradient-to-br from-violet-900/90 to-fuchsia-900/90 p-6 max-w-md w-full mx-4 shadow-2xl"
        style="transform: scale(0.9); transition: transform 0.3s ease"
      >
        <div class="flex items-start gap-4 mb-4">
          <div
            class="flex-shrink-0 w-12 h-12 rounded-full bg-red-500/20 flex items-center justify-center"
          >
            <svg
              class="w-6 h-6 text-red-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              />
            </svg>
          </div>
          <div class="flex-1">
            <h3 class="text-lg font-semibold text-violet-100 mb-2">
              Confirmar a√ß√£o
            </h3>
            <p
              id="confirm-message-slots"
              class="text-violet-200/80 text-sm"
            ></p>
          </div>
        </div>
        <div class="flex gap-3 justify-end">
          <button
            id="confirm-cancel-slots"
            class="px-4 py-2 rounded-lg bg-violet-700/30 hover:bg-violet-700/50 text-violet-100 transition-colors"
          >
            Cancelar
          </button>
          <button
            id="confirm-ok-slots"
            class="px-4 py-2 rounded-lg bg-red-600 hover:bg-red-700 text-white transition-colors"
          >
            Confirmar
          </button>
        </div>
      </div>
    </div>

    <h2 class="text-lg font-medium text-violet-100 mb-4">
      Cora√ß√£o de Mem√≥rias ‚ú®
    </h2>

    <div class="relative mx-auto max-w-2xl">
      <!-- SVG do template em formato de cora√ß√£o -->
      <div class="album-template" id="album-template">
        <!-- Slot 1 - Topo esquerdo -->
        <div
          class="album-slot"
          data-slot="1"
          style="
            position: absolute;
            top: 15%;
            left: 15%;
            width: 120px;
            height: 120px;
          "
        >
          <% if (slots[1]) { %> <%- include('_slot_filled', { slotNumber: 1,
          filePath: slots[1].file_path, photoId: slots[1].photo_id, mediaType:
          slots[1].media_type }) %> <% } else { %> <%- include('_slot_empty', {
          slotNumber: 1 }) %> <% } %>
        </div>

        <!-- Slot 2 - Topo direito -->
        <div
          class="album-slot"
          data-slot="2"
          style="
            position: absolute;
            top: 15%;
            right: 15%;
            width: 120px;
            height: 120px;
          "
        >
          <% if (slots[2]) { %> <%- include('_slot_filled', { slotNumber: 2,
          filePath: slots[2].file_path, photoId: slots[2].photo_id, mediaType:
          slots[2].media_type }) %> <% } else { %> <%- include('_slot_empty', {
          slotNumber: 2 }) %> <% } %>
        </div>

        <!-- Slot 3 - Centro esquerdo -->
        <div
          class="album-slot"
          data-slot="3"
          style="
            position: absolute;
            top: 45%;
            left: 10%;
            width: 140px;
            height: 140px;
          "
        >
          <% if (slots[3]) { %> <%- include('_slot_filled', { slotNumber: 3,
          filePath: slots[3].file_path, photoId: slots[3].photo_id, mediaType:
          slots[3].media_type }) %> <% } else { %> <%- include('_slot_empty', {
          slotNumber: 3 }) %> <% } %>
        </div>

        <!-- Slot 4 - Centro direito -->
        <div
          class="album-slot"
          data-slot="4"
          style="
            position: absolute;
            top: 45%;
            right: 10%;
            width: 140px;
            height: 140px;
          "
        >
          <% if (slots[4]) { %> <%- include('_slot_filled', { slotNumber: 4,
          filePath: slots[4].file_path, photoId: slots[4].photo_id, mediaType:
          slots[4].media_type }) %> <% } else { %> <%- include('_slot_empty', {
          slotNumber: 4 }) %> <% } %>
        </div>

        <!-- Slot 5 - Base esquerdo -->
        <div
          class="album-slot"
          data-slot="5"
          style="
            position: absolute;
            bottom: 10%;
            left: 25%;
            width: 110px;
            height: 110px;
          "
        >
          <% if (slots[5]) { %> <%- include('_slot_filled', { slotNumber: 5,
          filePath: slots[5].file_path, photoId: slots[5].photo_id, mediaType:
          slots[5].media_type }) %> <% } else { %> <%- include('_slot_empty', {
          slotNumber: 5 }) %> <% } %>
        </div>

        <!-- Slot 6 - Base direito -->
        <div
          class="album-slot"
          data-slot="6"
          style="
            position: absolute;
            bottom: 10%;
            right: 25%;
            width: 110px;
            height: 110px;
          "
        >
          <% if (slots[6]) { %> <%- include('_slot_filled', { slotNumber: 6,
          filePath: slots[6].file_path, photoId: slots[6].photo_id, mediaType:
          slots[6].media_type }) %> <% } else { %> <%- include('_slot_empty', {
          slotNumber: 6 }) %> <% } %>
        </div>

        <!-- Fundo decorativo (cora√ß√£o) -->
        <svg
          viewBox="0 0 100 100"
          class="absolute inset-0 w-full h-full opacity-10 pointer-events-none"
          style="z-index: -1"
        >
          <path
            d="M50,90 C50,90 10,60 10,35 C10,20 20,10 30,10 C40,10 50,20 50,30 C50,20 60,10 70,10 C80,10 90,20 90,35 C90,60 50,90 50,90 Z"
            fill="currentColor"
            class="text-fuchsia-500/30"
          />
        </svg>
      </div>
    </div>
  </section>
</div>

<style>
  .album-template {
    position: relative;
    width: 100%;
    padding-bottom: 100%; /* Aspect ratio 1:1 */
  }

  .album-slot {
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .album-slot.drag-over {
    transform: scale(1.05);
    box-shadow: 0 0 20px rgba(232, 121, 249, 0.5);
  }

  .photo-library-item {
    cursor: grab;
    transition: transform 0.2s ease;
  }

  .photo-library-item:active {
    cursor: grabbing;
  }

  .photo-library-item:hover {
    transform: scale(1.05);
  }

  /* Controle individual do overlay de deletar */
  .photo-item-individual:hover .photo-delete-overlay {
    opacity: 1;
  }

  /* Overlay nunca deve interferir no drag - apenas o bot√£o √© clic√°vel */
  .photo-delete-overlay {
    pointer-events: none;
  }

  .photo-delete-overlay .photo-delete-btn {
    pointer-events: auto;
  }

  /* Durante drag, esconde overlay para evitar conflitos */
  .photo-library-item[style*="opacity: 0.5"] .photo-delete-overlay {
    display: none !important;
  }

  /* Scrollbar customizada e vis√≠vel */
  #photos-carousel::-webkit-scrollbar {
    height: 8px;
  }

  #photos-carousel::-webkit-scrollbar-track {
    background: rgba(139, 92, 246, 0.1);
    border-radius: 10px;
  }

  #photos-carousel::-webkit-scrollbar-thumb {
    background: rgba(139, 92, 246, 0.6);
    border-radius: 10px;
    transition: background 0.3s;
  }

  #photos-carousel::-webkit-scrollbar-thumb:hover {
    background: rgba(139, 92, 246, 0.8);
  }

  #photos-carousel {
    -ms-overflow-style: auto; /* Mostra scrollbar no IE/Edge */
    scrollbar-width: thin; /* Firefox: scrollbar fina */
    scrollbar-color: rgba(139, 92, 246, 0.6) rgba(139, 92, 246, 0.1); /* Firefox: cor do thumb e track */
    cursor: grab;
    scroll-behavior: smooth;
    padding-bottom: 12px; /* Espa√ßo para scrollbar */
  }

  #photos-carousel:active {
    cursor: grabbing;
    scroll-behavior: auto; /* Desativa smooth durante drag manual */
  }

  /* Feedback visual durante drag do carrossel */
  #photos-carousel.dragging {
    cursor: grabbing;
    user-select: none;
  }

  #photos-carousel.dragging .photo-library-item {
    pointer-events: none; /* Previne iniciar drag de foto durante scroll */
  }
</style>

<script>
  (function AlbumPage() {
    const CSRF =
      (document.querySelector('meta[name="csrf-token"]') || {}).content || "";

    // ===== MODAL DE CONFIRMA√á√ÉO DA BIBLIOTECA =====
    function showConfirmLibrary(message) {
      return new Promise((resolve) => {
        const modal = document.getElementById("confirm-modal-library");
        const messageEl = document.getElementById("confirm-message-library");
        const okBtn = document.getElementById("confirm-ok-library");
        const cancelBtn = document.getElementById("confirm-cancel-library");

        messageEl.textContent = message;
        modal.classList.remove("hidden");

        // Anima√ß√£o de entrada
        setTimeout(() => {
          modal.style.opacity = "1";
          modal.querySelector("div > div").style.transform = "scale(1)";
        }, 10);

        function close(result) {
          // Anima√ß√£o de sa√≠da
          modal.style.opacity = "0";
          modal.querySelector("div > div").style.transform = "scale(0.9)";
          setTimeout(() => {
            modal.classList.add("hidden");
            resolve(result);
          }, 300);
        }

        okBtn.onclick = () => close(true);
        cancelBtn.onclick = () => close(false);

        // Fechar ao clicar fora
        modal.onclick = (e) => {
          if (e.target === modal) close(false);
        };

        // Fechar com ESC
        const escHandler = (e) => {
          if (e.key === "Escape") {
            close(false);
            document.removeEventListener("keydown", escHandler);
          }
        };
        document.addEventListener("keydown", escHandler);
      });
    }

    // ===== MODAL DE CONFIRMA√á√ÉO DOS SLOTS =====
    function showConfirmSlots(message) {
      return new Promise((resolve) => {
        const modal = document.getElementById("confirm-modal-slots");
        const messageEl = document.getElementById("confirm-message-slots");
        const okBtn = document.getElementById("confirm-ok-slots");
        const cancelBtn = document.getElementById("confirm-cancel-slots");

        messageEl.textContent = message;
        modal.classList.remove("hidden");

        // Anima√ß√£o de entrada
        setTimeout(() => {
          modal.style.opacity = "1";
          modal.querySelector("div > div").style.transform = "scale(1)";
        }, 10);

        function close(result) {
          // Anima√ß√£o de sa√≠da
          modal.style.opacity = "0";
          modal.querySelector("div > div").style.transform = "scale(0.9)";
          setTimeout(() => {
            modal.classList.add("hidden");
            resolve(result);
          }, 300);
        }

        okBtn.onclick = () => close(true);
        cancelBtn.onclick = () => close(false);

        // Fechar ao clicar fora
        modal.onclick = (e) => {
          if (e.target === modal) close(false);
        };

        // Fechar com ESC
        const escHandler = (e) => {
          if (e.key === "Escape") {
            close(false);
            document.removeEventListener("keydown", escHandler);
          }
        };
        document.addEventListener("keydown", escHandler);
      });
    }

    // Controles do carrossel
    const carousel = document.getElementById("photos-carousel");
    const prevBtn = document.getElementById("carousel-prev");
    const nextBtn = document.getElementById("carousel-next");

    function updateCarouselButtons() {
      if (!carousel || !prevBtn || !nextBtn) return;

      const { scrollLeft, scrollWidth, clientWidth } = carousel;

      // Desabilita bot√£o esquerdo se estiver no in√≠cio
      prevBtn.disabled = scrollLeft <= 0;

      // Desabilita bot√£o direito se estiver no final
      nextBtn.disabled = scrollLeft + clientWidth >= scrollWidth - 10;
    }

    if (carousel && prevBtn && nextBtn) {
      // Scroll suave ao clicar nos bot√µes
      prevBtn.addEventListener("click", () => {
        carousel.scrollBy({ left: -300, behavior: "smooth" });
      });

      nextBtn.addEventListener("click", () => {
        carousel.scrollBy({ left: 300, behavior: "smooth" });
      });

      // Atualiza estado dos bot√µes ao scrollar
      carousel.addEventListener("scroll", updateCarouselButtons);

      // Atualiza no carregamento
      updateCarouselButtons();

      // ===== DRAG TO SCROLL =====
      let isDragging = false;
      let startX;
      let scrollLeftStart;
      let hasMoved = false; // Flag para detectar se houve movimento

      carousel.addEventListener("mousedown", (e) => {
        // Ignora se for em um elemento arrast√°vel (foto)
        if (e.target.closest(".photo-library-item")) return;

        isDragging = true;
        hasMoved = false;
        carousel.classList.add("dragging");
        carousel.style.cursor = "grabbing";
        carousel.style.userSelect = "none";
        startX = e.pageX - carousel.offsetLeft;
        scrollLeftStart = carousel.scrollLeft;
      });

      carousel.addEventListener("mouseleave", () => {
        isDragging = false;
        carousel.classList.remove("dragging");
        carousel.style.cursor = "grab";
      });

      carousel.addEventListener("mouseup", () => {
        isDragging = false;
        carousel.classList.remove("dragging");
        carousel.style.cursor = "grab";
      });

      carousel.addEventListener("mousemove", (e) => {
        if (!isDragging) return;
        e.preventDefault();
        hasMoved = true;
        const x = e.pageX - carousel.offsetLeft;
        const walk = (x - startX) * 2; // Multiplicador para velocidade do scroll
        carousel.scrollLeft = scrollLeftStart - walk;
      });

      // ===== TOUCH SUPPORT (Mobile) =====
      let touchStartX;
      let touchScrollLeft;

      carousel.addEventListener("touchstart", (e) => {
        if (e.target.closest(".photo-library-item")) return;
        touchStartX = e.touches[0].pageX;
        touchScrollLeft = carousel.scrollLeft;
      });

      carousel.addEventListener("touchmove", (e) => {
        if (!touchStartX) return;
        const x = e.touches[0].pageX;
        const walk = (touchStartX - x) * 1.5;
        carousel.scrollLeft = touchScrollLeft + walk;
      });

      carousel.addEventListener("touchend", () => {
        touchStartX = null;
      });
    }

    // Auto-submit form quando arquivo for selecionado (usando fetch direto)
    const photoInput = document.getElementById("photo-input");
    const uploadLabel = document.getElementById("upload-label");
    const uploadText = document.getElementById("upload-text");

    if (photoInput) {
      photoInput.addEventListener("change", async function () {
        if (!this.files || this.files.length === 0) return;

        const files = Array.from(this.files);
        let uploadedCount = 0;
        let failedCount = 0;
        let videoCount = 0;
        let photoCount = 0;

        // Desabilita bot√£o e mostra loading
        uploadLabel.style.opacity = "0.6";
        uploadLabel.style.pointerEvents = "none";
        uploadText.textContent = `Enviando... 0/${files.length}`;

        // Upload de cada foto individualmente
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          const formData = new FormData();
          formData.append("photo", file);

          try {
            // Fetch direto sem intercepta√ß√£o do HTMX
            const response = await fetch(
              window.location.origin + "/album/upload",
              {
                method: "POST",
                body: formData,
                credentials: "same-origin",
              }
            );

            if (response.ok) {
              const html = await response.text();

              // Insere novo item de foto no in√≠cio do carrossel
              const photosCarousel = document.getElementById("photos-carousel");
              photosCarousel.insertAdjacentHTML("afterbegin", html);

              // Conta se √© v√≠deo ou foto baseado no tipo do arquivo
              const isVideo = file.type.startsWith("video/");
              if (isVideo) {
                videoCount++;
              } else {
                photoCount++;
              }

              uploadedCount++;
              uploadText.textContent = `Enviando... ${uploadedCount}/${files.length}`;
            } else {
              const errorData = await response.json();
              console.error(
                `Erro ao fazer upload de ${file.name}:`,
                errorData.error
              );
              failedCount++;
            }
          } catch (error) {
            console.error(`Erro no upload de ${file.name}:`, error);
            failedCount++;
          }
        }

        // Restaura bot√£o
        uploadLabel.style.opacity = "1";
        uploadLabel.style.pointerEvents = "auto";
        uploadText.textContent = "Adicionar m√≠dia";

        // Atualiza contador
        if (uploadedCount > 0) {
          const counter = document.querySelector("header .text-sm");
          const currentCount = parseInt(counter.textContent.match(/\d+/)[0]);
          counter.textContent = `${currentCount + uploadedCount}/20 fotos`;

          // Volta o carrossel para o in√≠cio
          const carousel = document.getElementById("photos-carousel");
          if (carousel) {
            carousel.scrollTo({ left: 0, behavior: "smooth" });
          }

          // Re-aplica drag handlers, delete handlers e lazy loading
          initDragDrop();
          initPhotoDelete();
          initLazyLoading();

          // Atualiza bot√µes do carrossel
          updateCarouselButtons();
        }

        // Reset input
        photoInput.value = "";

        // Mostra resultado
        if (uploadedCount > 0 && failedCount === 0) {
          if (window.showToast) {
            // Cria mensagem apropriada baseada no que foi enviado
            let message = "‚úÖ ";
            const parts = [];

            if (photoCount > 0) {
              parts.push(`${photoCount} foto${photoCount > 1 ? "s" : ""}`);
            }
            if (videoCount > 0) {
              parts.push(`${videoCount} v√≠deo${videoCount > 1 ? "s" : ""}`);
            }

            message +=
              parts.join(" e ") +
              " adicionado" +
              (uploadedCount > 1 ? "s" : "") +
              "!";
            window.showToast(message);
          }
        } else if (failedCount > 0) {
          alert(
            `${uploadedCount} m√≠dia(s) adicionada(s), ${failedCount} falhou(aram).`
          );
        }
      });
    }

    // Drag & Drop da biblioteca para slots
    function initDragDrop() {
      // Tornar fotos da biblioteca arrast√°veis
      document.querySelectorAll(".photo-library-item").forEach((item) => {
        // Evita adicionar listeners duplicados
        if (item.dataset.dragInitialized === "true") return;
        item.dataset.dragInitialized = "true";

        item.draggable = true;

        item.addEventListener("dragstart", (e) => {
          e.dataTransfer.effectAllowed = "copy";
          e.dataTransfer.setData("photo-id", item.dataset.photoId);
          item.style.opacity = "0.5";

          // Esconde o overlay durante o drag (evita conflitos)
          const overlay = item.querySelector(".photo-delete-overlay");
          if (overlay) {
            overlay.style.display = "none";
          }
        });

        item.addEventListener("dragend", (e) => {
          item.style.opacity = "1";

          // Restaura o overlay ap√≥s o drag
          const overlay = item.querySelector(".photo-delete-overlay");
          if (overlay) {
            overlay.style.display = "flex";
          }
        });
      });

      // Tornar slots receptivos
      document.querySelectorAll(".album-slot").forEach((slot) => {
        // Evita adicionar listeners duplicados
        if (slot.dataset.dropInitialized === "true") return;
        slot.dataset.dropInitialized = "true";

        slot.addEventListener("dragover", (e) => {
          e.preventDefault();
          e.dataTransfer.dropEffect = "copy";
          slot.classList.add("drag-over");
        });

        slot.addEventListener("dragleave", (e) => {
          slot.classList.remove("drag-over");
        });

        slot.addEventListener("drop", async (e) => {
          e.preventDefault();
          slot.classList.remove("drag-over");

          const photoId = e.dataTransfer.getData("photo-id");
          const slotNumber = slot.dataset.slot;

          if (!photoId || !slotNumber) return;

          try {
            const res = await fetch(`/album/slot/${slotNumber}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": CSRF,
                "HX-Request": "true",
              },
              body: JSON.stringify({ photo_id: parseInt(photoId) }),
            });

            if (res.ok) {
              const html = await res.text();
              slot.innerHTML = html;
              // Remove flag para permitir re-inicializa√ß√£o ap√≥s innerHTML
              slot.dataset.dropInitialized = "false";
              // Re-inicializar eventos de remo√ß√£o
              initSlotRemoval();

              // Detecta se √© v√≠deo ou foto baseado no elemento arrastado
              const draggedItem = document.querySelector(
                `[data-photo-id="${photoId}"]`
              );
              const isVideo =
                draggedItem && draggedItem.dataset.mediaType === "video";
              const mediaType = isVideo ? "V√≠deo" : "Foto";

              if (window.showToast)
                window.showToast(`${mediaType} adicionado ao slot!`);
            } else {
              if (window.showToast)
                window.showToast("Erro ao adicionar m√≠dia", "error");
            }
          } catch (err) {
            console.error(err);
            if (window.showToast)
              window.showToast("Erro ao adicionar m√≠dia", "error");
          }
        });
      });
    }

    // Remover foto do slot
    function initSlotRemoval() {
      document.querySelectorAll(".slot-remove-btn").forEach((btn) => {
        // Evita adicionar listeners duplicados
        if (btn.dataset.removeInitialized === "true") return;
        btn.dataset.removeInitialized = "true";

        btn.onclick = async (e) => {
          e.preventDefault();
          e.stopPropagation();

          const slotNumber = btn.dataset.slot;
          const confirmed = await showConfirmSlots("Remover m√≠dia deste slot?");
          if (!confirmed) return;

          try {
            const res = await fetch(`/album/slot/${slotNumber}`, {
              method: "DELETE",
              headers: {
                "X-CSRF-Token": CSRF,
                "HX-Request": "true",
              },
            });

            if (res.ok) {
              const html = await res.text();
              const slot = document.querySelector(
                `.album-slot[data-slot="${slotNumber}"]`
              );
              if (slot) {
                slot.innerHTML = html;
                // Remove flag para permitir re-inicializa√ß√£o
                slot.dataset.dropInitialized = "false";
              }
              if (window.showToast) window.showToast("M√≠dia removida");
            }
          } catch (err) {
            console.error(err);
          }
        };
      });
    }

    // Deletar foto da biblioteca
    function initPhotoDelete() {
      document.querySelectorAll(".photo-delete-btn").forEach((btn) => {
        // Evita adicionar listeners duplicados
        if (btn.dataset.deleteInitialized === "true") return;
        btn.dataset.deleteInitialized = "true";

        btn.onclick = async (e) => {
          e.preventDefault();
          e.stopPropagation();

          const photoId = btn.dataset.photoId;
          const confirmed = await showConfirmLibrary(
            "Deletar esta m√≠dia? Ela ser√° removida de todos os slots."
          );
          if (!confirmed) return;

          // Salva posi√ß√£o do scroll antes de deletar
          const carousel = document.getElementById("photos-carousel");
          const scrollPosition = carousel ? carousel.scrollLeft : 0;

          try {
            const res = await fetch(`/album/photo/${photoId}`, {
              method: "DELETE",
              headers: {
                "X-CSRF-Token": CSRF,
                "HX-Request": "true",
              },
            });

            if (res.ok) {
              // Remove item da biblioteca com anima√ß√£o
              const item = btn.closest(".photo-library-item");
              if (item) {
                item.style.transition = "opacity 0.3s, transform 0.3s";
                item.style.opacity = "0";
                item.style.transform = "scale(0.8)";
                setTimeout(() => item.remove(), 300);
              }

              // Limpa slots que tinham essa foto (transforma em vazio)
              clearSlotsWithPhoto(photoId);

              // Restaura posi√ß√£o do scroll ap√≥s breve delay
              setTimeout(() => {
                if (carousel) {
                  carousel.scrollLeft = scrollPosition;
                }
              }, 350);

              // Atualiza bot√µes do carrossel
              updateCarouselButtons();

              if (window.showToast) {
                window.showToast("M√≠dia deletada com sucesso!");
              }
            }
          } catch (err) {
            console.error(err);
            if (window.showToast) {
              window.showToast("Erro ao deletar m√≠dia", "error");
            }
          }
        };
      });
    }

    // Limpa slots que continham uma foto espec√≠fica
    function clearSlotsWithPhoto(photoId) {
      const slots = document.querySelectorAll(".album-slot");

      slots.forEach((slot) => {
        // Verifica se slot tem imagem OU v√≠deo com data-photo-id correspondente
        const img = slot.querySelector(`img[data-photo-id="${photoId}"]`);
        const video = slot.querySelector(`video[data-photo-id="${photoId}"]`);

        if (img || video) {
          // Transforma slot preenchido em slot vazio
          const slotNumber = slot.dataset.slot;
          slot.innerHTML = `
            <div class="w-full h-full rounded-lg border-2 border-dashed border-violet-700/50 bg-violet-900/10 flex items-center justify-center text-violet-300/60 text-xs">
              ${slotNumber}
            </div>
          `;
          slot.classList.add("empty-slot");
        }
      });
    }

    // Armazena o observer globalmente para poder desconectar depois
    let mediaObserver = null;
    let loadingImages = new Set(); // Track de imagens sendo carregadas

    // Lazy loading de imagens com Intersection Observer
    function initLazyLoading() {
      console.log("[Album] initLazyLoading chamado");

      // Evitar m√∫ltiplos observers
      const container = document.querySelector("#photos-carousel");
      if (!container) {
        console.log("[Album] Container n√£o encontrado");
        return;
      }

      if (container.dataset.lazyInitialized === "true") {
        console.log("[Album] Lazy loading j√° inicializado");
        return;
      }

      container.dataset.lazyInitialized = "true";
      console.log("[Album] Marcando container como inicializado");

      // Limpar observer anterior se existir
      if (mediaObserver) {
        console.log("[Album] Desconectando observer anterior");
        mediaObserver.disconnect();
      }

      mediaObserver = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const element = entry.target;
              const src = element.getAttribute("data-src");

              if (src && !element.dataset.loading) {
                console.log("[Album] Carregando:", src);
                element.dataset.loading = "true";
                loadingImages.add(src);

                if (element.tagName === "VIDEO") {
                  // Para v√≠deos: definir src e iniciar reprodu√ß√£o
                  element.src = src;
                  element.style.opacity = "0";
                  element.addEventListener(
                    "loadeddata",
                    () => {
                      loadingImages.delete(src);
                      setTimeout(() => {
                        element.style.opacity = "1";
                      }, 10);
                      element.play().catch(() => {
                        // Ignorar erros de autoplay
                      });
                    },
                    { once: true }
                  );
                  element.removeAttribute("data-src");
                  element.classList.remove("lazy-image");
                  observer.unobserve(element);
                } else {
                  // Para imagens: aplicar src direto (SEM new Image)
                  element.style.opacity = "0";

                  // Abortar se j√° saiu da p√°gina
                  const onError = () => {
                    loadingImages.delete(src);
                    console.log("[Album] Erro ao carregar:", src);
                  };

                  element.onerror = onError;
                  element.onload = () => {
                    loadingImages.delete(src);
                    setTimeout(() => {
                      if (element.isConnected) {
                        // S√≥ aplicar se ainda estiver no DOM
                        element.style.opacity = "1";
                      }
                    }, 10);
                  };

                  element.src = src;
                  element.removeAttribute("data-src");
                  element.classList.remove("lazy-image");
                  observer.unobserve(element);
                }
              }
            }
          });
        },
        {
          rootMargin: "200px",
          threshold: 0.01,
        }
      );

      // Observa todas as imagens e v√≠deos com lazy loading
      const lazyElements = document.querySelectorAll(".lazy-image");
      console.log("[Album] Observando", lazyElements.length, "elementos lazy");
      lazyElements.forEach((element) => {
        mediaObserver.observe(element);
      });
    }

    // Cleanup quando sair da p√°gina /album
    function cleanupAlbum() {
      console.log("[Album] ‚ö†Ô∏è CLEANUP INICIADO");
      console.log(
        "[Album] Imagens ainda carregando:",
        Array.from(loadingImages)
      );

      if (mediaObserver) {
        console.log("[Album] Desconectando observer");
        mediaObserver.disconnect();
        mediaObserver = null;
      }

      // Pausar e cancelar carregamento de todos os v√≠deos
      document.querySelectorAll("video").forEach((video) => {
        video.pause();
        video.removeAttribute("src");
        video.load();
      });

      // Cancelar carregamento de TODAS as imagens com data-src ou que est√£o carregando
      document.querySelectorAll("img").forEach((img) => {
        const dataSrc = img.getAttribute("data-src");
        if (dataSrc) {
          console.log("[Album] Cancelando carregamento de imagem:", dataSrc);
          img.removeAttribute("data-src");
        }

        // Abortar carregamento em progresso
        if (img.dataset.loading === "true") {
          console.log("[Album] Abortando carregamento:", img.src);
          img.src = ""; // For√ßa cancelar requisi√ß√£o
        }
      });

      // Limpar tracking
      loadingImages.clear();

      // Limpar flag de inicializa√ß√£o
      const container = document.querySelector("#photos-carousel");
      if (container) {
        container.dataset.lazyInitialized = "false";
      }

      console.log("[Album] ‚úÖ CLEANUP CONCLU√çDO");
    } // Expor cleanup globalmente
    window.__albumCleanup = cleanupAlbum;

    // Registrar handler de afterSwap apenas uma vez
    if (!window.__albumAfterSwapRegistered) {
      window.__albumAfterSwapRegistered = true;
      document.addEventListener("htmx:afterSwap", (e) => {
        // S√≥ executar se estiver na p√°gina /album
        if (window.location.pathname.includes("/album")) {
          console.log("[Album] htmx:afterSwap detectado, reinicializando...");
          initDragDrop();
          initPhotoDelete();
          initLazyLoading();
        }
      });
    }

    // Inicializar apenas se estiver na p√°gina /album
    if (window.location.pathname.includes("/album")) {
      console.log("[Album] Inicializa√ß√£o inicial na p√°gina /album");
      initDragDrop();
      initSlotRemoval();
      initPhotoDelete();
      initLazyLoading();
    } else {
      console.log(
        "[Album] Script carregado mas n√£o est√° em /album, ignorando inicializa√ß√£o"
      );
    }
  })();
</script>
